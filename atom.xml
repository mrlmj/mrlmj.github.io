<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AndroidDev]]></title>
  <link href="http://www.monkeyliu.com/atom.xml" rel="self"/>
  <link href="http://www.monkeyliu.com/"/>
  <updated>2018-04-13T11:37:38+08:00</updated>
  <id>http://www.monkeyliu.com/</id>
  <author>
    <name><![CDATA[放开那个猴子]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[路径动画的实现方案]]></title>
    <link href="http://www.monkeyliu.com/blog/2018/04/08/path-tracing/"/>
    <updated>2018-04-08T20:10:38+08:00</updated>
    <id>http://www.monkeyliu.com/blog/2018/04/08/path-tracing</id>
    <content type="html"><![CDATA[<p>UI开发中有时会遇到这样的效果（重点看对号√的动画实现）</p>

<p><img src="http://www.monkeyliu.com/images/articles/path_tracing.gif" alt="path tracing" /></p>

<p>这篇文章就总结下，如何实现这样的一个UI动效。</p>

<!-- more -->


<h3>基本分析</h3>

<p>我们都知道，使用Android的Path Api可以很容易地画出一个对号（或者任意其他的不规则图形），实现这个效果的难点在于怎么以动画的形式逐渐地把这个路径给绘制出来。这里把路径(Path)从0到1绘制出来的过程称之为路径追踪（Path Tracing).</p>

<p>[@Path的绘制API]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//构造任意一个path</span>
</span><span class='line'><span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">();</span>
</span><span class='line'><span class="n">path</span><span class="o">.</span><span class="na">moveTo</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">path</span><span class="o">.</span><span class="na">lineTo</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="n">path</span><span class="o">.</span><span class="na">lineTo</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="mi">200</span><span class="o">);</span>
</span><span class='line'><span class="c1">//画出path</span>
</span><span class='line'><span class="n">cavas</span><span class="o">.</span><span class="na">drawPath</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>实现方案一（PathMeasure)</h3>

<p>Android提供了PathMeasure类，用来进行路径的计算，可以用来实现路径追踪。</p>

<p>创建PathMeasure：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PathMeasure</span> <span class="n">pathMeasure</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PathMeasure</span><span class="o">(</span><span class="n">Path</span> <span class="n">path</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">forceClosed</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者也可以使用无参构造函数:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PathMeasure</span> <span class="n">pathMeasure</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PathMeasure</span><span class="o">();</span>
</span><span class='line'><span class="n">pathMeasure</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="n">Path</span> <span class="n">path</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">forceClosed</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个参数传入需要进行计算的路径，第二个参数指示是否将路径闭合。</p>

<p>几个有用的API</p>

<ol>
<li>获取路径的像素长度：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">pathMeasure</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>获取路径的片段：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">pathMeasure</span><span class="o">.</span><span class="na">getSegment</span><span class="o">(</span><span class="kt">float</span> <span class="n">startD</span><span class="o">,</span> <span class="kt">float</span> <span class="n">stopD</span><span class="o">,</span> <span class="n">Path</span> <span class="n">dst</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">startWithMoveTo</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法是绘制路径追踪动画的核心方法，通过这个方法可以获取整个Path你想要的片段，<strong>保持起点不变，终点一点点变长</strong>，就可以将路径一点一点地绘制出来了。</p>

<p><em>参数介绍</em>：</p>

<ul>
<li>startD和stopD：开始距离和结束距离，控制截取的Path的内容。</li>
<li>dst:将截取的路径保存到这个Path中，之后绘制这个Path即可。</li>
<li>startWithMoveTo: 通常为true，表示对dst path先调用moveTo移动到起点的位置。</li>
</ul>


<p>相当于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dst</span><span class="o">.</span><span class="na">moveTo</span><span class="o">(</span><span class="n">起点</span><span class="o">);</span>
</span><span class='line'><span class="n">dst</span><span class="o">.</span><span class="na">lineTo</span><span class="o">(</span><span class="n">终点</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果设为false，经过测试，相当于:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dst</span><span class="o">.</span><span class="na">lineTo</span><span class="o">(</span><span class="n">起点</span><span class="o">);</span>
</span><span class='line'><span class="n">dst</span><span class="o">.</span><span class="na">lineTo</span><span class="o">(</span><span class="n">终点</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个Path如果直接lineTo某个点，隐式地在最开始添加了一个moveTo(0,0)，这种情况下获取的Path实际上起点连接到了(0,0)点。</p>

<p>使用上面两个API，结合属性动画，实现路径追踪的效果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RouteTraceView</span> <span class="kd">extends</span> <span class="n">View</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Path</span> <span class="n">mDstPath</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">float</span> <span class="n">mEndDistance</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">PathMeasure</span> <span class="n">mPathMeasure</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Paint</span> <span class="n">mPaint</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">RouteTraceView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>        <span class="n">init</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mPaint</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Paint</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">ANTI_ALIAS_FLAG</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mPaint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mPaint</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">Style</span><span class="o">.</span><span class="na">STROKE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mPaint</span><span class="o">.</span><span class="na">setStrokeWidth</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mDstPath</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mDstPath</span><span class="o">.</span><span class="na">lineTo</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span> <span class="c1">//这样据说是因为硬件加速的bug，但是我去掉也没发现什么问题</span>
</span><span class='line'>        <span class="n">mPathMeasure</span><span class="o">.</span><span class="na">getSegment</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">mEndDistance</span><span class="o">,</span> <span class="n">mDstPath</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="n">canvas</span><span class="o">.</span><span class="na">drawPath</span><span class="o">(</span><span class="n">mDstPath</span><span class="o">,</span> <span class="n">mPaint</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onSizeChanged</span><span class="o">(</span><span class="kt">int</span> <span class="n">w</span><span class="o">,</span> <span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="kt">int</span> <span class="n">oldw</span><span class="o">,</span> <span class="kt">int</span> <span class="n">oldh</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onSizeChanged</span><span class="o">(</span><span class="n">w</span><span class="o">,</span> <span class="n">h</span><span class="o">,</span> <span class="n">oldw</span><span class="o">,</span> <span class="n">oldh</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//要动态绘制出来的路径</span>
</span><span class='line'>        <span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">();</span>
</span><span class='line'>        <span class="n">path</span><span class="o">.</span><span class="na">moveTo</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
</span><span class='line'>        <span class="n">path</span><span class="o">.</span><span class="na">lineTo</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'>        <span class="n">path</span><span class="o">.</span><span class="na">lineTo</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="mi">200</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mPathMeasure</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PathMeasure</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mPathMeasure</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">float</span> <span class="n">length</span> <span class="o">=</span> <span class="n">mPathMeasure</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ValueAnimator</span> <span class="n">valueAnimator</span> <span class="o">=</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">valueAnimator</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">valueAnimator</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">AnimatorUpdateListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationUpdate</span><span class="o">(</span><span class="n">ValueAnimator</span> <span class="n">animation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//动画的形式改变终点的距离</span>
</span><span class='line'>                <span class="n">mEndDistance</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">animation</span><span class="o">.</span><span class="na">getAnimatedValue</span><span class="o">()</span> <span class="o">*</span> <span class="n">length</span><span class="o">;</span>
</span><span class='line'>                <span class="n">invalidate</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">valueAnimator</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是很简单，对于任意一个Path，都能通过这种改变终点距离的方式，一点点地追踪出来~</p>

<h3>实现方案二（DashPathEffect）</h3>

<p>这种方式比较黑科技，算是奇技淫巧，用起来也是十分方便。</p>

<p>Paint画笔有这样一个方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mPaint</span><span class="o">.</span><span class="na">setPathEffect</span><span class="o">(</span><span class="n">PathEffect</span> <span class="n">effect</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>用来给画出的路径添加bling bling的特效。</p>

<h5>PathEffect的实现类有以下几个：</h5>

<ul>
<li>CornerPathEffect</li>
</ul>


<p><img src="http://www.monkeyliu.com/images/articles/path_affect_0.jpg" alt="corner" /></p>

<ul>
<li>DecretePathEffect  随机偏移的乱七八糟的效果</li>
</ul>


<p><img src="http://www.monkeyliu.com/images/articles/path_affect_1.jpg" alt="decrete" /></p>

<ul>
<li>DashPathEffect</li>
</ul>


<p><img src="http://www.monkeyliu.com/images/articles/path_affect_2.jpg" alt="dash" /></p>

<ul>
<li><p>PathDashPathEffect  用某个Path来绘制虚线</p>

<p><img src="http://www.monkeyliu.com/images/articles/path_affect_3.jpg" alt="path dash" /></p></li>
<li><p>SumPathEffect  组合两种Effect，分别按照两种PathEffect对路径进行绘制</p>

<p><img src="http://www.monkeyliu.com/images/articles/path_affect_4.jpg" alt="corner" /></p></li>
<li><p>ComposePathEffect 组合两种Effect，先对目标路径应用第一个Effect，对改变后的Path再应用第二个Effect</p>

<p><img src="http://www.monkeyliu.com/images/articles/path_affect_5.jpg" alt="corner" /></p></li>
</ul>


<p>那这些PathEffect跟要实现的路径追踪有半毛钱关系吗？？？</p>

<p>Too young too simple！看我是怎么用DashPathEffect来装逼的！</p>

<h5>先来具体看一下DashPathEffect的构造方法：</h5>

<p>[@DashPathEffect构造方法]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">DashPathEffect</span><span class="o">(</span><span class="kt">float</span> <span class="n">intervals</span><span class="o">[],</span> <span class="kt">float</span> <span class="n">phase</span><span class="o">){}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>intervals是一个数组，它的大小必须为偶数，最少两个。其中的元素按照【画线长度，空白长度，画线长度，空白长度….】排列。</li>
</ul>


<p>比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PathEffect</span> <span class="n">pathEffect</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DashPathEffect</span><span class="o">(</span><span class="k">new</span> <span class="kt">float</span><span class="o">[]{</span><span class="mi">20</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">},</span> <span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>就表示在路径上先画20px的线，再画10px的空白，再画5px的线，再画10px的空白，再循环以此类推。</p>

<ul>
<li>phase表示相位的偏移，经过测试<strong>phase为正时，虚线整体向起点方向偏移</strong>，比如上述代码中offset如果为20,则我们先看到的则是10px的空白了~</li>
</ul>


<p><strong>黑科技马上要来了！</strong></p>

<p>思考下面这种写法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//要动态绘制出来的路径</span>
</span><span class='line'><span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">();</span>
</span><span class='line'><span class="n">path</span><span class="o">.</span><span class="na">moveTo</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
</span><span class='line'><span class="n">path</span><span class="o">.</span><span class="na">lineTo</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="n">path</span><span class="o">.</span><span class="na">lineTo</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="mi">200</span><span class="o">);</span>
</span><span class='line'><span class="c1">//拿到Path的长度</span>
</span><span class='line'><span class="n">PathMeasure</span> <span class="n">pathMeasure</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PathMeasure</span><span class="o">();</span>
</span><span class='line'><span class="n">pathMeasure</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="kt">float</span> <span class="n">pathLength</span> <span class="o">=</span> <span class="n">pathMeasure</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span>
</span><span class='line'><span class="c1">//特效</span>
</span><span class='line'><span class="n">DashPathEffect</span> <span class="n">dashPathEffect</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DashPathEffect</span><span class="o">(</span><span class="k">new</span> <span class="kt">float</span><span class="o">[]{</span><span class="n">pathLength</span><span class="o">,</span> <span class="n">pathLength</span><span class="o">},</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">mPaint</span><span class="o">.</span><span class="na">setPathEffect</span><span class="o">(</span><span class="n">dashPathEffect</span><span class="o">);</span>
</span><span class='line'><span class="n">canvas</span><span class="o">.</span><span class="na">drawPath</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">mPaint</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中intervals数组画线的长度和空白的长度都是path的长度。</p>

<p>按照前面讲的，这样整个路径画出来，先是实线部分，就把路径填满了，这个路径一下子全画了出来。</p>

<p>稍微修改一下，将phase改为pathLength：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//特效</span>
</span><span class='line'><span class="n">DashPathEffect</span> <span class="n">dashPathEffect</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DashPathEffect</span><span class="o">(</span><span class="k">new</span> <span class="kt">float</span><span class="o">[]{</span><span class="n">pathLength</span><span class="o">,</span> <span class="n">pathLength</span><span class="o">},</span> <span class="n">pathLength</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照前面讲的，虚线整体向起点移动pathLength个像素，这样实线部分完全移出了路径，隐藏起来了，显示的完全是空白的部分（长度也是pathLength）。</p>

<p><strong>So</strong></p>

<p>完全隐藏和完全显示两个状态都有了，剩下的中间状态，通过一个属性动画将phase从pathLength变到0，整个路径就慢慢地显示出来了！！!</p>

<p>至此，便利用PathEffect的虚线效果结合phase的偏移，将路径追踪效果轻松实现了~</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://www.curious-creature.com/2013/12/21/android-recipe-4-path-tracing/">http://www.curious-creature.com/2013/12/21/android-recipe-4-path-tracing/</a></li>
<li><a href="https://www.jianshu.com/p/81150d4740a4">https://www.jianshu.com/p/81150d4740a4</a></li>
<li><a href="http://hencoder.com/ui-1-2/">http://hencoder.com/ui-1-2/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Andorid启动流程探索]]></title>
    <link href="http://www.monkeyliu.com/blog/2018/03/24/android-boot/"/>
    <updated>2018-03-24T09:48:26+08:00</updated>
    <id>http://www.monkeyliu.com/blog/2018/03/24/android-boot</id>
    <content type="html"><![CDATA[<p>最近在了解OTA升级方面的东西，学习的过程中，对Android的启动流程产生了很大的兴趣，很好奇为什么调用了<code>RecoverySystem#installPackage</code>方法之后手机重启就自动进入升级界面开始升级？Android整个系统的启动流程到底是怎样的（之前只是有过简单的了解）。加上之前对bootloader、recovery等概念比较模糊，刷机的时候一般也都是按照网上的方法做，很不程序员，于是打算把这些东西梳理一下。</p>

<p>本篇文章主要是探索Android手机启动的流程，包括正常的模式（按下电源键到系统正常启动的整个流程）和一些其他的模式（比如进入recovery升级、线刷等）。掌握之后刷机就不用再去各种找教程，直接拿到刷机包一顿操作就行。</p>

<!-- more -->


<h3>Android手机正常启动流程</h3>

<p>首先需要梳理一下Android手机正常启动的整个流程是怎样的，也就是当我们按下电源键一直到看到Launcher中间经历了什么！整个过程会从简表述，抛开其中很多不重要的细节，从比较高的层次以容易懂的语言来看这个过程。</p>

<p>首先，操作系统的启动是一个比较矛盾的过程：必须先运行程序，然后计算机才能启动，但是计算机不启动就无法运行程序！ 早期采取的措施就是：将一小段程序固化在ROM中，计算机启动时，先去将它读入到内存中执行，进而将整个操作系统运行起来。在Windows上这段程序称之为BIOS（基本输入输出系统），对应的在Android中我们称之为BootLoader。</p>

<p><strong>Android电源键按下时，首先从ROM的固定位置读取这段BootLoader程序（加载到RAM中）</strong>。BootLoader完成的工作大致有：</p>

<p>初始化RAM、硬件，加载内核，跳转到内核中由其继续完成接下来的工作。</p>

<p>在内核模块中，主要进行大部分硬件、驱动、文件系统的初始化，在最后创建<code>init</code>进程，这是Android中的第一个进程！ init进程中会执行init.rc脚本，其中最特别是创建了Zygote受精卵进程。在Zygote进程会预先加载App需要的一些资源和Android的framework class，之后其他App进程的创建都是直接fork Zygote进程，它们共用这些资源，节省开销！<em>（像Xposed框架就是在Zygote进程中插入hook代码，这样所有应用调用到framework api，都会执行到它的逻辑，因为共用了相同的内存资源）</em></p>

<p>有一个例外是，SystemServer进程不是fork Zygote而来，SystemServer中完成了大量系统服务的启动，比如我们经常接触到的WindowMangerService、ActivityManagerService、PackageManagerService等等。在ActivityManagerServie启动之后，发出action为<code>Intent.CATEGORY_HOME</code>的intent，启动Launcher应用，至此Andorid系统启动完毕！</p>

<p>正常启动的流程是不是非常简单，最后来总结一下：</p>

<p><strong>按下电源键 —>   cpu加载BootLoader到内存中执行   —>  初始化硬件、进入内核模块   —>  内核模块中加载驱动、文件系统、创建第一个进程Zygote —> 创建一些系列的SystemServer，发送Home Intent  —> Launcher启动</strong></p>

<h3>Recovery模式（卡刷）</h3>

<p>刷过机的同学可能都知道Recovery这个东西，一般是通过长按组合键（不同手机不同组合键）进入Recovery然后安装升级包之类的。那Recovery到底是个什么东东呢，怎么进入到Recovery模式中的。</p>

<p>其实Recovery模式也是一个小的操作系统，只不过我们看到的只是一个小小的简单界面，而正常的Android系统是可以看到Launcher应用和各种其他应用。有点类似于windows上的U盘启动盘用来修复、更新主系统的。</p>

<p><strong>那Recovery模式是怎么进去的呢？</strong></p>

<p>上面讲过正常的流程中，BootLoader程序会初始化RAM、硬件，然后加载内核。如果我们在BootLoader启动的时候按下了对应的组合按键（比如音量-和电源键），BootLoader检测到之后同样会加载内核，但是此时加载的不是boot分区的内核，而是recovery分区的内核，在recovery分区的内核中初始化了一个简单的文件系统可供我们选择升级包进行升级。同时也会创建init进程执行自己的init脚本（源码<code>bootable/recovery/etc/init.rc</code>)，其中做了一件非常重要的事情，<strong>启动recovery服务</strong>（源码<code>bootable/recovery/recovery.cpp</code>），这个服务稍后会讲解一下做了什么事情。</p>

<p>除了长按组合键这种进入Recovery模式的方式，还可以执行adb命令 <code>adb shell reboot recovery</code>，重启后进入Recovery模式。这种方式是怎么进入Recovery模式的呢？</p>

<p>当BootLoader在执行过程中没有检测到任何组合按键，就会去MISC分区的启动控制信息块BCB（Bootloader Control Block）。BCB是一个结构体，存放着启动命令，根据这个命令，系统可以进入三种不同的启动模式</p>

<p>[@BCB结构体]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">bootloader_message</span><span class="p">{</span>
</span><span class='line'>     <span class="kt">char</span> <span class="n">command</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>  <span class="c1">//存放不同的启动命令</span>
</span><span class='line'>
</span><span class='line'>     <span class="kt">char</span> <span class="n">status</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>   <span class="c1">//update-radio或update-hboot完成存放执行结果</span>
</span><span class='line'>
</span><span class='line'>     <span class="kt">char</span> <span class="n">recovery</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span> <span class="c1">//存放在/cache/recovery/command中的命令</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>当结构体中command为空时，进入正常的系统启动流程。</p>

<p>当结构体中command字段为"boot-recovery"时，则进入Recovery模式，进行下一步的功能。</p>

<p>所以，执行adb命令进入就是将"boot-recovery"这个字段写入了BCB的command字段中，然后重启系统。</p>

<p>同样，在安装OTA升级包的时候通常会调用一个这样的接口<code>RecoverySystem#installPackage</code>，然后就会重启进入到升级页面。其实，在调用了这个接口之后，会将"boot-recovery"写入BCB的command字段， 然后重启设备。 这样，设备重启之后，读取到BCB的command跳转到Recovery中启动Recovery服务进行OTA包升级。</p>

<p><strong>总结：</strong></p>

<ol>
<li>Recovery模式是一个mini的操作系统，主要启动自己的Recovery服务搞一些事情（具体下面细说）。</li>
<li>进入Recovery模式有三种方式：长按组合键、adb reboot recovery、RecoverySystem#installPackage等API接口。 第一种方式是BootLoader执行过程中检测的。 后两种方式原理相同，都是修改BCB的内容，然后BootLoader读取跳转。</li>
</ol>


<h3>Recovery服务的细节</h3>

<p>上面介绍了进入Recovery的大概流程，提到了一个Recovery的服务，Recovery能提供的功能基本都在这个服务中定义，可以从源码的注释中可以详细了解到Recovery提供的全部服务：</p>

<p>[@bootable/recovery/recovery.cpp]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * The recovery tool communicates with the main system through /cache files. </span>
</span><span class='line'><span class="cm"> *   /cache/recovery/command - INPUT - command line for tool, one arg per line </span>
</span><span class='line'><span class="cm"> *   /cache/recovery/log - OUTPUT - combined log file from recovery run(s) </span>
</span><span class='line'><span class="cm"> *   /cache/recovery/intent - OUTPUT - intent that was passed in </span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * The arguments which may be supplied in the recovery.command file: </span>
</span><span class='line'><span class="cm"> *   --send_intent=anystring - write the text out to recovery.intent </span>
</span><span class='line'><span class="cm"> *   --update_package=path - verify install an OTA package file </span>
</span><span class='line'><span class="cm"> *   --wipe_data - erase user data (and cache), then reboot </span>
</span><span class='line'><span class="cm"> *   --wipe_cache - wipe cache (but not user data), then reboot </span>
</span><span class='line'><span class="cm"> *   --set_encrypted_filesystem=on|off - enables / diasables encrypted fs </span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * After completing, we remove /cache/recovery/command and reboot. </span>
</span><span class='line'><span class="cm"> * Arguments may also be supplied in the bootloader control block (BCB). </span>
</span><span class='line'><span class="cm"> * These important scenarios must be safely restartable at any point: </span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * FACTORY RESET </span>
</span><span class='line'><span class="cm"> * 1. user selects &quot;factory reset&quot; </span>
</span><span class='line'><span class="cm"> * 2. main system writes &quot;--wipe_data&quot; to /cache/recovery/command </span>
</span><span class='line'><span class="cm"> * 3. main system reboots into recovery </span>
</span><span class='line'><span class="cm"> * 4. get_args() writes BCB with &quot;boot-recovery&quot; and &quot;--wipe_data&quot; </span>
</span><span class='line'><span class="cm"> *    -- after this, rebooting will restart the erase -- </span>
</span><span class='line'><span class="cm"> * 5. erase_volume() reformats /data </span>
</span><span class='line'><span class="cm"> * 6. erase_volume() reformats /cache </span>
</span><span class='line'><span class="cm"> * 7. finish_recovery() erases BCB </span>
</span><span class='line'><span class="cm"> *    -- after this, rebooting will restart the main system -- </span>
</span><span class='line'><span class="cm"> * 8. main() calls reboot() to boot main system </span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * OTA INSTALL </span>
</span><span class='line'><span class="cm"> * 1. main system downloads OTA package to /cache/some-filename.zip </span>
</span><span class='line'><span class="cm"> * 2. main system writes &quot;--update_package=/cache/some-filename.zip&quot; </span>
</span><span class='line'><span class="cm"> * 3. main system reboots into recovery </span>
</span><span class='line'><span class="cm"> * 4. get_args() writes BCB with &quot;boot-recovery&quot; and &quot;--update_package=...&quot; </span>
</span><span class='line'><span class="cm"> *    -- after this, rebooting will attempt to reinstall the update -- </span>
</span><span class='line'><span class="cm"> * 5. install_package() attempts to install the update </span>
</span><span class='line'><span class="cm"> *    NOTE: the package install must itself be restartable from any point </span>
</span><span class='line'><span class="cm"> * 6. finish_recovery() erases BCB </span>
</span><span class='line'><span class="cm"> *    -- after this, rebooting will (try to) restart the main system -- </span>
</span><span class='line'><span class="cm"> * 7. ** if install failed ** </span>
</span><span class='line'><span class="cm"> *    7a. prompt_and_wait() shows an error icon and waits for the user </span>
</span><span class='line'><span class="cm"> *    7b; the user reboots (pulling the battery, etc) into the main system </span>
</span><span class='line'><span class="cm"> * 8. main() calls maybe_install_firmware_update() </span>
</span><span class='line'><span class="cm"> *    ** if the update contained radio/hboot firmware **: </span>
</span><span class='line'><span class="cm"> *    8a. m_i_f_u() writes BCB with &quot;boot-recovery&quot; and &quot;--wipe_cache&quot; </span>
</span><span class='line'><span class="cm"> *        -- after this, rebooting will reformat cache &amp; restart main system -- </span>
</span><span class='line'><span class="cm"> *    8b. m_i_f_u() writes firmware image into raw cache partition </span>
</span><span class='line'><span class="cm"> *    8c. m_i_f_u() writes BCB with &quot;update-radio/hboot&quot; and &quot;--wipe_cache&quot; </span>
</span><span class='line'><span class="cm"> *        -- after this, rebooting will attempt to reinstall firmware -- </span>
</span><span class='line'><span class="cm"> *    8d. bootloader tries to flash firmware </span>
</span><span class='line'><span class="cm"> *    8e. bootloader writes BCB with &quot;boot-recovery&quot; (keeping &quot;--wipe_cache&quot;) </span>
</span><span class='line'><span class="cm"> *        -- after this, rebooting will reformat cache &amp; restart main system -- </span>
</span><span class='line'><span class="cm"> *    8f. erase_volume() reformats /cache </span>
</span><span class='line'><span class="cm"> *    8g. finish_recovery() erases BCB </span>
</span><span class='line'><span class="cm"> *        -- after this, rebooting will (try to) restart the main system -- </span>
</span><span class='line'><span class="cm"> * 9. main() calls reboot() to boot main system </span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * SECURE FILE SYSTEMS ENABLE/DISABLE </span>
</span><span class='line'><span class="cm"> * 1. user selects &quot;enable encrypted file systems&quot; </span>
</span><span class='line'><span class="cm"> * 2. main system writes &quot;--set_encrypted_filesystems=on|off&quot; to </span>
</span><span class='line'><span class="cm"> *    /cache/recovery/command </span>
</span><span class='line'><span class="cm"> * 3. main system reboots into recovery </span>
</span><span class='line'><span class="cm"> * 4. get_args() writes BCB with &quot;boot-recovery&quot; and </span>
</span><span class='line'><span class="cm"> *    &quot;--set_encrypted_filesystems=on|off&quot; </span>
</span><span class='line'><span class="cm"> *    -- after this, rebooting will restart the transition -- </span>
</span><span class='line'><span class="cm"> * 5. read_encrypted_fs_info() retrieves encrypted file systems settings from /data </span>
</span><span class='line'><span class="cm"> *    Settings include: property to specify the Encrypted FS istatus and </span>
</span><span class='line'><span class="cm"> *    FS encryption key if enabled (not yet implemented) </span>
</span><span class='line'><span class="cm"> * 6. erase_volume() reformats /data </span>
</span><span class='line'><span class="cm"> * 7. erase_volume() reformats /cache </span>
</span><span class='line'><span class="cm"> * 8. restore_encrypted_fs_info() writes required encrypted file systems settings to /data </span>
</span><span class='line'><span class="cm"> *    Settings include: property to specify the Encrypted FS status and </span>
</span><span class='line'><span class="cm"> *    FS encryption key if enabled (not yet implemented) </span>
</span><span class='line'><span class="cm"> * 9. finish_recovery() erases BCB </span>
</span><span class='line'><span class="cm"> *    -- after this, rebooting will restart the main system -- </span>
</span><span class='line'><span class="cm"> * 10. main() calls reboot() to boot main system </span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<p>前面也说过，RecoverySystem#installPackage(path)将"boot-recovery"写入BCB的command字段，重启之后进入Recovery进行升级。 那Recovery是从哪里拿到升级包的路径呢?</p>

<p>从注释中找到答案，Recovery服务通过/cache来和主系统交互（注释第一行）。执行RecoverySystem#installPackage(path)之后会将path路径写入<em>/cache/recovery/command</em>中(命令大概是这样:&ndash;update_package=[path])，然后Recovery服务读取到update package的命令之后就进行升级。 除了升级命令之外，常用的还有wipe data、wipe cache等命令，都是类似地将命令写入command文件中与Recovery服务交互。Android的设置中的恢复出厂设置其实就是写了一个wipe data命令到 command文件中，让Recovery服务启动时去重置数据。</p>

<p>另外，Recovery服务在读取到 <em>/cache/recovery/command</em>中的命令之后，还会将此命令写入到BCB控制块的recovery字段，主要是用来防止在升级等过程中突然断电，再次重启之后仍然能够进入Recovery，继续之前的升级功能。在升级等操作完成之后会清空BCB和/cache/recovery/command，避免下次重启之后仍然进入Recovery， 这些都是一些细节问题。</p>

<p>Recovery服务的具体流程可以看下面这张图：</p>

<p><img src="http://www.monkeyliu.com/images/articles/android_boot/recovery_service.png" alt="recovery_service_process" /></p>

<p><strong>总结</strong></p>

<p>1、Recovery服务通过/cache来和主系统交互，Andorid系统一般是将命令写入/cache/recovery/command中来和Recovery服务进行交互。</p>

<p>2、Recovery服务能够做的功能有：工厂重置、OTA升级、安全文件系统的启用/禁用。</p>

<h3>FastBoot模式（线刷）</h3>

<p>Android启动除了正常模式和Recovery模式之外还有一个模式：FastBoot模式。</p>

<p>Recovery模式下的刷机通常称之为”卡刷“，因为升级包必须放在Android文件系统中，然后进行升级。FastBoot模式下的刷机称之为”线刷“，必须通过手机和电脑建立USB连接进行分区的烧录。在某些情况下，比如手机刷成砖头无法进入Recovery模式，可以进入fastboot模式通过线刷来恢复。</p>

<p>线刷一般也是通过组合按键进入，个人理解FastBoot模式是BootLoader程序的一部分，所以需要BootLoader支持。另外，也可以通过<code>adb reboot bootloader</code>进入FastBoot模式（如果成砖头了就只能组合按键进入了）。进入FastBoot模式之后，就可以通过在电脑端执行fastboot命令来将固件刷入到Android中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">fastboot</span> <span class="n">devices</span>
</span><span class='line'><span class="n">fastboot</span> <span class="n">flash</span> <span class="n">bootloader</span> <span class="n">u-boot</span><span class="p">.</span><span class="n">bin</span>
</span><span class='line'><span class="n">fastboot</span> <span class="n">flash</span> <span class="n">kernel</span> <span class="n">uImage</span>
</span><span class='line'><span class="n">fastboot</span> <span class="n">flash</span> <span class="n">system</span> <span class="n">system</span><span class="p">.</span><span class="n">img</span>
</span><span class='line'><span class="n">fastboot</span> <span class="n">flash</span> <span class="n">userdata</span> <span class="n">userdata</span><span class="p">.</span><span class="n">img</span>
</span><span class='line'><span class="n">fastboot</span> <span class="n">flash</span> <span class="n">ramdisk</span> <span class="n">ramdisk-uboot</span><span class="p">.</span><span class="n">img</span>
</span><span class='line'><span class="n">fastboot</span> <span class="n">erase</span> <span class="n">system</span> <span class="c">#擦除system分区</span>
</span><span class='line'><span class="n">fastboot</span> <span class="n">erase</span> <span class="n">cache</span> <span class="c">#擦除cache分区</span>
</span><span class='line'><span class="n">fastboot</span> <span class="n">erase</span> <span class="n">userdata</span> <span class="c">#擦除userdata分区</span>
</span><span class='line'><span class="n">fastboot</span> <span class="n">reboot</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>至此，Android的启动流程大概讲完了，最后稍稍总结一下：</strong></p>

<p>1、Android启动有三种情况：正常启动、进入Recovery模式、进入FastBoot模式。</p>

<p>2、通过组合键或者adb命令进入Recovery模式，可以进行工厂重置、OTA升级、安全文件系统的启用/禁用等功能，其中Recovery服务通过/cache跟主系统通信，还涉及到一个BCB的概念。这种方式称之为”卡刷“。</p>

<p>3、通过组合键或者adb命令进入FastBoot模式，通过与PC的连接进行固件烧录。这种方式称之为”线刷"。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://www.cnblogs.com/bluestorm/p/3340894.html">http://www.cnblogs.com/bluestorm/p/3340894.html</a></li>
<li><a href="https://juejin.im/entry/57664abedf0eea0062f4dea8">https://juejin.im/entry/57664abedf0eea0062f4dea8</a></li>
<li><a href="https://juejin.im/entry/57382e1f2e958a0069cc8eae">https://juejin.im/entry/57382e1f2e958a0069cc8eae</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android之Theme、Style、Attr]]></title>
    <link href="http://www.monkeyliu.com/blog/2017/11/09/android-theme-style-attr/"/>
    <updated>2017-11-09T19:15:01+08:00</updated>
    <id>http://www.monkeyliu.com/blog/2017/11/09/android-theme-style-attr</id>
    <content type="html"><![CDATA[<p>Android UI开发中经常会涉及到Theme、Style、Attr等概念，熟悉掌握这些概念能够帮助我们快速实现想要的UI效果，另外自定义View也经常需要使用到这些东西。</p>

<!-- more -->


<h3>概念</h3>

<ul>
<li><strong>Attr</strong> 属性——基础单元，在Theme/Style/XML文件中作为Key使用，指定相应的value。</li>
</ul>


<p>定义方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;borderWidth&quot;</span> <span class="na">format=</span><span class="s">&quot;dimen&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方式:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;View</span>
</span><span class='line'>      <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>      <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>      <span class="na">app:borderWidth=</span><span class="s">&quot;10dp&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>或</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">attr</span> <span class="o">=</span> <span class="n">R</span><span class="o">.</span><span class="na">attr</span><span class="o">.</span><span class="na">borderWidth</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以将多个关联属性分组管理:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">declare</span><span class="o">-</span><span class="n">styleable</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;MyButton&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">attr</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;buttonWidth&quot;</span> <span class="n">format</span><span class="o">=</span><span class="s">&quot;dimension&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">attr</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;buttonHeight&quot;</span> <span class="n">format</span><span class="o">=</span><span class="s">&quot;dimension&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">attr</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;buttonColor&quot;</span> <span class="n">format</span><span class="o">=</span><span class="s">&quot;color&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">declare</span><span class="o">-</span><span class="n">styleable</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过以下方式可以访问到一个属性数组:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">attrs</span> <span class="o">=</span> <span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">MyButton</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Style</strong> 样式集合，将多个属性放在一起，达到复用的目的。</li>
</ul>


<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/button&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>        <span class="na">android:textSize=</span><span class="s">&quot;20sp&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;#FF000&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>抽离出一些公共的属性作为Style:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;myButtonStyle&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:layout_width&quot;</span><span class="nt">&gt;</span>wrap_content<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:layout_height&quot;</span><span class="nt">&gt;</span>wrap_content<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:gravity&quot;</span><span class="nt">&gt;</span>center<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:textColor&quot;</span><span class="nt">&gt;</span>#FF0000<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:textSize&quot;</span><span class="nt">&gt;</span>20sp<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>引用Style:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/button&quot;</span>
</span><span class='line'>        <span class="na">style=</span><span class="s">&quot;@style/myButtonStyle&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Theme</strong> 主题，相当于一个大的Style，作用在应用的层次。其中会包含一些Window相关的属性，比如:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;windowBackground&quot;</span><span class="nt">&gt;</span>?attr/colorBackground<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;windowClipToOutline&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;windowFrame&quot;</span><span class="nt">&gt;</span>@null<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;windowNoTitle&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;windowFullscreen&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;windowOverscan&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;windowIsFloating&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/item&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一些组件(Dialog，View等）的统一样式，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;dialogTheme&quot;</span><span class="nt">&gt;</span>@style/ThemeOverlay.Material.Dialog<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;dialogTitleDecorLayout&quot;</span><span class="nt">&gt;</span>@layout/dialog_title_material<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;dialogPreferredPadding&quot;</span><span class="nt">&gt;</span>@dimen/dialog_padding_material<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;searchViewStyle&quot;</span><span class="nt">&gt;</span>@style/Widget.Material.SearchView<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;searchDialogTheme&quot;</span><span class="nt">&gt;</span>@style/Theme.Material.SearchBar<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;numberPickerStyle&quot;</span><span class="nt">&gt;</span>@style/Widget.Material.NumberPicker<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;calendarViewStyle&quot;</span><span class="nt">&gt;</span>@style/Widget.Material.CalendarView<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;timePickerStyle&quot;</span><span class="nt">&gt;</span>@style/Widget.Material.TimePicker<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;timePickerDialogTheme&quot;</span><span class="nt">&gt;</span>?attr/dialogTheme<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;datePickerStyle&quot;</span><span class="nt">&gt;</span>@style/Widget.Material.DatePicker<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;datePickerDialogTheme&quot;</span><span class="nt">&gt;</span>?attr/dialogTheme<span class="nt">&lt;/item&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>主题相当于应用的一套皮肤，这套皮肤制定了各个组件的显示风格，使之具有统一性。我们熟知的有<code>Theme.Holo</code>,<code>Theme.Material</code>等等。</p>

<h3>Style、Theme作用在View上的流程</h3>

<p><strong>问题：</strong>既然使用Style、Theme都可以给View一个样式，那么他们是怎样作用在View上的呢？他们两个的优先级又是怎么样的。</p>

<p>这里说一下优先级，日常的开发中应该都能够得出一个经验：<strong>layout布局文件中属性 > style样式 > Theme主题</strong></p>

<p>拿一个Button举例，如果在布局文件中给Button设置了<code>android:background="XXX"</code> 或者抽离到Style中再应用，那么Button就显示了我们指定的背景。 如果没有设置背景属性，Button仍然是有一个背景的。这个默认背景就是应用到了Theme中的样式，并且对于不同的主题有不同的样式~</p>

<p>然后重点来说一下样式是怎样作用到View上的，对这个过程进行深入的理解。同样拿一个Android的View来举例：<code>TextView</code>，看看它是怎么应用样式的。</p>

<p>[@TextView] 构造方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">TextView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">TextView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">attr</span><span class="o">.</span><span class="na">textViewStyle</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">TextView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;deprecation&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">TextView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleRes</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">,</span> <span class="n">defStyleRes</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们继承Android的View来自定义View时，通过会被要求继承四个的构造方法中的一个。对于XML中布局的View，被调用2个参数的构造方法来new一个实例，其中attrs就是布局的属性集，其中包含了这个View的所有样式。</p>

<p>TextView所有的构造函数最终都指向最长参数的构造函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">TextView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleRes</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">,</span> <span class="n">defStyleRes</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Resources</span><span class="o">.</span><span class="na">Theme</span> <span class="n">theme</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getTheme</span><span class="o">();</span>
</span><span class='line'>        <span class="n">TypedArray</span> <span class="n">a</span> <span class="o">=</span> <span class="n">theme</span><span class="o">.</span><span class="na">obtainStyledAttributes</span><span class="o">(</span><span class="n">attrs</span><span class="o">,</span>
</span><span class='line'>                <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">TextViewAppearance</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">,</span> <span class="n">defStyleRes</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TypedArray</span> <span class="n">appearance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ap</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getResourceId</span><span class="o">(</span>
</span><span class='line'>                <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">TextViewAppearance_textAppearance</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">a</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">ap</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">appearance</span> <span class="o">=</span> <span class="n">theme</span><span class="o">.</span><span class="na">obtainStyledAttributes</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">ap</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">TextAppearance</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">appearance</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">appearance</span><span class="o">.</span><span class="na">getIndexCount</span><span class="o">();</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">attr</span> <span class="o">=</span> <span class="n">appearance</span><span class="o">.</span><span class="na">getIndex</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">switch</span> <span class="o">(</span><span class="n">attr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">TextAppearance_textColorHighlight</span><span class="o">:</span>
</span><span class='line'>                    <span class="n">textColorHighlight</span> <span class="o">=</span> <span class="n">appearance</span><span class="o">.</span><span class="na">getColor</span><span class="o">(</span><span class="n">attr</span><span class="o">,</span> <span class="n">textColorHighlight</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">case</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">TextAppearance_textColor</span><span class="o">:</span>
</span><span class='line'>                    <span class="n">textColor</span> <span class="o">=</span> <span class="n">appearance</span><span class="o">.</span><span class="na">getColorStateList</span><span class="o">(</span><span class="n">attr</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="c1">//省略大量Case</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">appearance</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="n">theme</span><span class="o">.</span><span class="na">obtainStyledAttributes</span><span class="o">(</span><span class="n">attrs</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">TextView</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">,</span> <span class="n">defStyleRes</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getIndexCount</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">attr</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getIndex</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">switch</span> <span class="o">(</span><span class="n">attr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">TextView_editable</span><span class="o">:</span>
</span><span class='line'>                <span class="n">editable</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="n">attr</span><span class="o">,</span> <span class="n">editable</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">TextView_inputMethod</span><span class="o">:</span>
</span><span class='line'>                <span class="n">inputMethod</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getText</span><span class="o">(</span><span class="n">attr</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="c1">//省略大量Case</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中最核心的一个方法是<code>context.obtainStyledAttributes(AttributeSet, int[] attrs, defStyleAttr, defStyleRes)</code>。</p>

<p><strong>AttributeSet</strong> : layout文件中解析出来的属性对象集合，包含我们的样式。</p>

<p><strong>attrs</strong>: 前面讲到的一组相关联的属性集合。<code>com.android.internal.R.styleable.TextView</code> 可在AOSP中查看具体有哪些属性，这里列出一部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;declare-styleable</span> <span class="na">name=</span><span class="s">&quot;TextView&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Determines the minimum type that getText() will return.</span>
</span><span class='line'><span class="c">             The default is &quot;normal&quot;.</span>
</span><span class='line'><span class="c">             Note that EditText and LogTextBox always return Editable,</span>
</span><span class='line'><span class="c">             even if you specify something less powerful here. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;bufferType&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Can return any CharSequence, possibly a</span>
</span><span class='line'><span class="c">             Spanned one if the source text was Spanned. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;enum</span> <span class="na">name=</span><span class="s">&quot;normal&quot;</span> <span class="na">value=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Can only return Spannable. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;enum</span> <span class="na">name=</span><span class="s">&quot;spannable&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Can only return Spannable and Editable. --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;enum</span> <span class="na">name=</span><span class="s">&quot;editable&quot;</span> <span class="na">value=</span><span class="s">&quot;2&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/attr&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Text to display. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;text&quot;</span> <span class="na">format=</span><span class="s">&quot;string&quot;</span> <span class="na">localization=</span><span class="s">&quot;suggested&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Hint text to display when the text is empty. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;hint&quot;</span> <span class="na">format=</span><span class="s">&quot;string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Text color. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;textColor&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Color of the text selection highlight. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;textColorHighlight&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Color of the hint text. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;textColorHint&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Base text color, typeface, size, and style. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;textAppearance&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Size of the text. Recommended dimension type for text is &quot;sp&quot; for scaled-pixels (example: 15sp). --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;textSize&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Sets the horizontal scaling factor for the text. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;textScaleX&quot;</span> <span class="na">format=</span><span class="s">&quot;float&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c">&lt;!--省略不少--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>defStyleAttr</strong> ： 一个指定的属性资源。在这里为 <code>com.android.internal.R.attr.textViewStyle</code>（2个参数的构造方法传进来的）。可以在<strong>Theme</strong>中找到此属性对应的值，对应了一个Style.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;textViewStyle&quot;</span><span class="nt">&gt;</span>@style/Widget.Material.Light.TextView<span class="nt">&lt;/item&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>defStyleRes</strong>:  Style资源，也是一组样式。</p>

<p>以上，<code>context.obtainStyledAttributes</code>  获取View样式的过程为：</p>

<ol>
<li><p>从AttributeSet样式集合中寻找<code>int[] attrs</code>指定的几个属性对应的值。例如：xml中指定了<code>android:textColor="#ff0000"</code>， attrs属性组中定义有<code>textColor</code>这个属性，则提取出来。</p></li>
<li><p>如果AttributeSet中没有要提取的样式（比如，以上没有指定textColor样式），则根据<strong>defStyleAttr</strong>来从指定的<strong>Theme</strong>中寻找样式。比如：Material主题中指定了:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;textViewStyle&quot;</span><span class="nt">&gt;</span>@style/Widget.Material.Light.TextView<span class="nt">&lt;/item&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>则进一步去<code>@style/Widget.Material.Light.TextView</code> 中寻找想要的样式。</p>

<ol>
<li>如果主题中仍然找不到要提取的样式。 则去<strong>defStyleRes</strong>(我们指定的Style样式中)寻找。</li>
</ol>


<h3>另外</h3>

<p>经过上面的分析，已经可以知道Theme是怎样应用默认样式到View上的了，因此我们就可以修改这种默认样式来定制我们自己的主题。比如我们想让默认的Button控件字体为30sp。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;CustomTheme&quot;</span> <span class="na">parent=</span><span class="s">&quot;@android:style/Theme.Material&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:buttonStyle&quot;</span><span class="nt">&gt;</span>@style/CustomButtonStyle<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;CustomButtonStyle&quot;</span> <span class="na">parent=</span><span class="s">&quot;@android:style/Widget.Button&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:textSize&quot;</span><span class="nt">&gt;</span>30sp<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，自定义<strong>CustomTheme</strong>继承Andorid的Theme，复写<strong>buttonStyle</strong>指向我们自定义的样式。</p>

<p>其次，定义我们自己的Button样式，可以继承原来的样式，复写textSize属性，来修改默认的Button字体大小。</p>

<h3>再另外</h3>

<p>前面提到<strong>Theme</strong>中会有一些Window的样式，我们可以复写来实现一些window的效果.比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;CustomTheme&quot;</span> <span class="na">parent=</span><span class="s">&quot;@android:style/Theme.Material&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:windowFullscreen&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/item&gt;</span> <span class="c">&lt;!--全屏--&gt;</span>
</span><span class='line'>   <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:statusBarColor&quot;</span><span class="nt">&gt;</span>#FF0000<span class="nt">&lt;/item&gt;</span> <span class="c">&lt;!--修改状态栏的颜色--&gt;</span>
</span><span class='line'>   <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;windowNoTitle&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/item&gt;</span> <span class="c">&lt;!--无标题--&gt;</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些属性在PhoneWindow的generateLayout方法中被解析和应用。</p>

<h3>相关资料</h3>

<ul>
<li>Android源码分析</li>
<li><a href="http://www.jianshu.com/p/d147608dc27b">Android沉浸状态栏的实现</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android按键事件分发机制]]></title>
    <link href="http://www.monkeyliu.com/blog/2017/10/23/keyevent-dispatch/"/>
    <updated>2017-10-23T06:51:09+08:00</updated>
    <id>http://www.monkeyliu.com/blog/2017/10/23/keyevent-dispatch</id>
    <content type="html"><![CDATA[<p>本文总结一下Android中按键事件的分发机制。Android的按键事件分发跟触摸事件分发类似，甚至比触摸事件分发更加简单！</p>

<h3>1.事件分发的根源</h3>

<p>首先，来回顾一下触摸事件分发的大致流程:</p>

<p>[@ViewGroup]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">){</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">consume</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">onInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">)){</span>
</span><span class='line'>      <span class="n">consume</span> <span class="o">=</span> <span class="n">onTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>      <span class="n">consume</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">consume</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Android触摸事件分发的具体流程可以看我的这边文章 -> <a href="http://www.monkeyliu.com/blog/2016/06/17/touchevent/">Android触摸事件分发机制</a></p>

<p>1.1 那么最开始的<code>dispatchTouchEvent</code>是哪里调用的，事件的根源是从哪里传上来的？</p>

<!-- more -->


<p>下图展示了Framework里是怎么将事件分发到View树中的：</p>

<p><img src="http://www.monkeyliu.com/images/articles/focus_root.png" alt="key_route" /></p>

<p>其中"一系列的InputStage"用到了责任链模式对事件依次进行处理。</p>

<p>InputStage责任链的创建：</p>

<p>[@ViewRootImpl#setView]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mSyntheticInputStage</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SyntheticInputStage</span><span class="o">();</span>
</span><span class='line'><span class="n">InputStage</span> <span class="n">viewPostImeStage</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ViewPostImeInputStage</span><span class="o">(</span><span class="n">mSyntheticInputStage</span><span class="o">);</span>
</span><span class='line'><span class="n">InputStage</span> <span class="n">nativePostImeStage</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">NativePostImeInputStage</span><span class="o">(</span><span class="n">viewPostImeStage</span><span class="o">,</span>
</span><span class='line'>                        <span class="s">&quot;aq:native-post-ime:&quot;</span> <span class="o">+</span> <span class="n">counterSuffix</span><span class="o">);</span>
</span><span class='line'><span class="n">InputStage</span> <span class="n">earlyPostImeStage</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EarlyPostImeInputStage</span><span class="o">(</span><span class="n">nativePostImeStage</span><span class="o">);</span>
</span><span class='line'><span class="n">InputStage</span> <span class="n">imeStage</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ImeInputStage</span><span class="o">(</span><span class="n">earlyPostImeStage</span><span class="o">,</span>
</span><span class='line'>                        <span class="s">&quot;aq:ime:&quot;</span> <span class="o">+</span> <span class="n">counterSuffix</span><span class="o">);</span>
</span><span class='line'><span class="n">InputStage</span> <span class="n">viewPreImeStage</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ViewPreImeInputStage</span><span class="o">(</span><span class="n">imeStage</span><span class="o">);</span>
</span><span class='line'><span class="n">InputStage</span> <span class="n">nativePreImeStage</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">NativePreImeInputStage</span><span class="o">(</span><span class="n">viewPreImeStage</span><span class="o">,</span>
</span><span class='line'>                        <span class="s">&quot;aq:native-pre-ime:&quot;</span> <span class="o">+</span> <span class="n">counterSuffix</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mFirstInputStage</span> <span class="o">=</span> <span class="n">nativePreImeStage</span><span class="o">;</span>
</span><span class='line'><span class="n">mFirstPostImeInputStage</span> <span class="o">=</span> <span class="n">earlyPostImeStage</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终可以在ViewPostImeInputStage中看到对事件的具体处理：</p>

<p>[@ViewPostImeInputStage]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">int</span> <span class="nf">onProcess</span><span class="o">(</span><span class="n">QueuedInputEvent</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">mEvent</span> <span class="k">instanceof</span> <span class="n">KeyEvent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nf">processKeyEvent</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// If delivering a new non-key event, make sure the window is</span>
</span><span class='line'>                <span class="c1">// now allowed to start updating.</span>
</span><span class='line'>                <span class="n">handleDispatchWindowAnimationStopped</span><span class="o">();</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">int</span> <span class="n">source</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">mEvent</span><span class="o">.</span><span class="na">getSource</span><span class="o">();</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">((</span><span class="n">source</span> <span class="o">&amp;</span> <span class="n">InputDevice</span><span class="o">.</span><span class="na">SOURCE_CLASS_POINTER</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nf">processPointerEvent</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">((</span><span class="n">source</span> <span class="o">&amp;</span> <span class="n">InputDevice</span><span class="o">.</span><span class="na">SOURCE_CLASS_TRACKBALL</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nf">processTrackballEvent</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nf">processGenericMotionEvent</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里根据InputEvent的类型进行不同的处理，如果是<code>KeyEvent</code>，进入<code>processKeyEvent</code>流程；否则如果是<code>MotionEvent</code>，根据具体的事件源来进入不同的流程。其中，触摸事件的分发就是进入到<code>processPointerEvent</code>中处理，进去再走几步就到了我们熟悉的<code>dispatchTouchEvent</code>。</p>

<p>1.2 继续跟进<code>processKeyEvent</code>:</p>

<p>[@ViewPostImeInputStage]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="nf">processKeyEvent</span><span class="o">(</span><span class="n">QueuedInputEvent</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">KeyEvent</span> <span class="n">event</span> <span class="o">=</span> <span class="o">(</span><span class="n">KeyEvent</span><span class="o">)</span><span class="n">q</span><span class="o">.</span><span class="na">mEvent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Deliver the key to the view hierarchy.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mView</span><span class="o">.</span><span class="na">dispatchKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">FINISH_HANDLED</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Handle automatic focus changes.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">()</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">direction</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getKeyCode</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_LEFT</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasNoModifiers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_LEFT</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_RIGHT</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasNoModifiers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_RIGHT</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_UP</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasNoModifiers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_UP</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_DOWN</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasNoModifiers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_DOWN</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_TAB</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasNoModifiers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_FORWARD</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasModifiers</span><span class="o">(</span><span class="n">KeyEvent</span><span class="o">.</span><span class="na">META_SHIFT_ON</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_BACKWARD</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">direction</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">View</span> <span class="n">focused</span> <span class="o">=</span> <span class="n">mView</span><span class="o">.</span><span class="na">findFocus</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">focused</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">View</span> <span class="n">v</span> <span class="o">=</span> <span class="n">focused</span><span class="o">.</span><span class="na">focusSearch</span><span class="o">(</span><span class="n">direction</span><span class="o">);</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">v</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">v</span> <span class="o">!=</span> <span class="n">focused</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="c1">// do the math the get the interesting rect</span>
</span><span class='line'>                            <span class="c1">// of previous focused into the coord system of</span>
</span><span class='line'>                            <span class="c1">// newly focused view</span>
</span><span class='line'>                            <span class="n">focused</span><span class="o">.</span><span class="na">getFocusedRect</span><span class="o">(</span><span class="n">mTempRect</span><span class="o">);</span>
</span><span class='line'>                            <span class="k">if</span> <span class="o">(</span><span class="n">mView</span> <span class="k">instanceof</span> <span class="n">ViewGroup</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                                <span class="o">((</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">mView</span><span class="o">).</span><span class="na">offsetDescendantRectToMyCoords</span><span class="o">(</span>
</span><span class='line'>                                        <span class="n">focused</span><span class="o">,</span> <span class="n">mTempRect</span><span class="o">);</span>
</span><span class='line'>                                <span class="o">((</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">mView</span><span class="o">).</span><span class="na">offsetRectIntoDescendantCoords</span><span class="o">(</span>
</span><span class='line'>                                        <span class="n">v</span><span class="o">,</span> <span class="n">mTempRect</span><span class="o">);</span>
</span><span class='line'>                            <span class="o">}</span>
</span><span class='line'>                            <span class="k">if</span> <span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="na">requestFocus</span><span class="o">(</span><span class="n">direction</span><span class="o">,</span> <span class="n">mTempRect</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                                <span class="n">playSoundEffect</span><span class="o">(</span><span class="n">SoundEffectConstants</span>
</span><span class='line'>                                        <span class="o">.</span><span class="na">getContantForFocusDirection</span><span class="o">(</span><span class="n">direction</span><span class="o">));</span>
</span><span class='line'>                                <span class="k">return</span> <span class="n">FINISH_HANDLED</span><span class="o">;</span>
</span><span class='line'>                            <span class="o">}</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                        <span class="c1">// Give the focused view a last chance to handle the dpad key.</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">mView</span><span class="o">.</span><span class="na">dispatchUnhandledMove</span><span class="o">(</span><span class="n">focused</span><span class="o">,</span> <span class="n">direction</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                            <span class="k">return</span> <span class="n">FINISH_HANDLED</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// find the best view to give focus to in this non-touch-mode with no-focus</span>
</span><span class='line'>                        <span class="n">View</span> <span class="n">v</span> <span class="o">=</span> <span class="n">focusSearch</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">v</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">v</span><span class="o">.</span><span class="na">requestFocus</span><span class="o">(</span><span class="n">direction</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                            <span class="k">return</span> <span class="n">FINISH_HANDLED</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">FORWARD</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，大概的过程分为两步：</p>

<ol>
<li><p>将KeyEvent传入View树中进行分发，如果return true，表示消费了按键事件，返回 <em>FINISH_HANDLED</em>，结束。</p></li>
<li><p>如果第1步返回false，表示View树中没有能力处理此按键事件，则processKeyEvent中根据此按键来进行焦点的改变。</p>

<p>​</p></li>
</ol>


<p>下面就分两块来详解这两个过程中的具体细节。</p>

<h3>2.按键事件分发的流程</h3>

<p>上面的第一步调用了<code>mView.dispatchKeyEvent(event)</code>来开始事件分发，其中mView是整个View树的最根布局，也就是DecorView。所以进入DecorView的源码看一下：</p>

<p>[@DecorView]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchKeyEvent</span><span class="o">(</span><span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">int</span> <span class="n">keyCode</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getKeyCode</span><span class="o">();</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">int</span> <span class="n">action</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">isDown</span> <span class="o">=</span> <span class="n">action</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">;</span>
</span><span class='line'>          <span class="c1">//...省略部分无关代码</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">isDestroyed</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">Callback</span> <span class="n">cb</span> <span class="o">=</span> <span class="n">getCallback</span><span class="o">();</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">handled</span> <span class="o">=</span> <span class="n">cb</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">mFeatureId</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">cb</span><span class="o">.</span><span class="na">dispatchKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span>
</span><span class='line'>                        <span class="o">:</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">handled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>               <span class="k">return</span> <span class="n">isDown</span> <span class="o">?</span> <span class="n">PhoneWindow</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">onKeyDown</span><span class="o">(</span><span class="n">mFeatureId</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getKeyCode</span><span class="o">(),</span> <span class="n">event</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">:</span> <span class="n">PhoneWindow</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">onKeyUp</span><span class="o">(</span><span class="n">mFeatureId</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getKeyCode</span><span class="o">(),</span> <span class="n">event</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过Callback，进入cb.dispatchKeyEvent(event)，这里的Callback就是<code>Activity</code>，<code>Activity</code>实现了Callback接口。通过这儿将事件传到了Activity当中，所以我们可以在Activity中监听到<code>onTouchEvent</code>、<code>onKeyDown</code>、<code>onKeyUp</code>等事件~</p>

<p>[@Activity]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchKeyEvent</span><span class="o">(</span><span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">onUserInteraction</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Let action bars open menus in response to the menu key prioritized over</span>
</span><span class='line'>        <span class="c1">// the window handling it</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getKeyCode</span><span class="o">()</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_MENU</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="n">mActionBar</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">mActionBar</span><span class="o">.</span><span class="na">onMenuKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Window</span> <span class="n">win</span> <span class="o">=</span> <span class="n">getWindow</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">win</span><span class="o">.</span><span class="na">superDispatchKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">View</span> <span class="n">decor</span> <span class="o">=</span> <span class="n">mDecor</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">decor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">decor</span> <span class="o">=</span> <span class="n">win</span><span class="o">.</span><span class="na">getDecorView</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">event</span><span class="o">.</span><span class="na">dispatch</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">decor</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>                <span class="o">?</span> <span class="n">decor</span><span class="o">.</span><span class="na">getKeyDispatcherState</span><span class="o">()</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里通过Window.superDispatchKeyEvent又将事件传到DecorView处理.</p>

<p>[@PhoneWindow]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">superDispatchKeyEvent</span><span class="o">(</span><span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mDecor</span><span class="o">.</span><span class="na">superDispatchKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>[@DecorView]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">superDispatchKeyEvent</span><span class="o">(</span><span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="c1">//...省略无关代码</span>
</span><span class='line'>     <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来调用super.dispatchKeyEvent进入ViewGroup中，开始真正的事件分发了！</p>

<p>首先看一下按键事件分发的大致流程，非常简单：</p>

<p>[@ViewGroup]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchKeyEvent</span><span class="o">(</span><span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//简化过后的逻辑</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="kd">super</span><span class="o">.</span><span class="na">dispatchKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mFocused</span><span class="o">.</span><span class="na">dispatchKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>     <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在ViewGroup进行分发的逻辑为：</p>

<p>先把事件交给自己的dispatchKeyEvent进行处理，如果消费了，结束。否则将事件传递给mFocused(含有焦点的子View)，继续分发。</p>

<blockquote><p>关于mFocused的赋值，可以从<code>View.reqeustFocus()</code>方法追踪到<code>ViewGroup.reqeustChildFocus</code>方法</p>

<p>[@ViewGroup]</p>

<pre><code class="java">public void requestChildFocus(View child, View focused) {
        if (DBG) {
            System.out.println(this + " requestChildFocus()");
        }
        if (getDescendantFocusability() == FOCUS_BLOCK_DESCENDANTS) {
            return;
        }

        // Unfocus us, if necessary
        super.unFocus(focused);

        // We had a previous notion of who had focus. Clear it.
        if (mFocused != child) {
            if (mFocused != null) {
                mFocused.unFocus(focused);
            }

            mFocused = child;
        }
        if (mParent != null) {
            mParent.requestChildFocus(this, focused);
        }
    }
</code></pre>

<p>当一个View请求焦点之后，依次向父View(mParent)调用，给mFocused赋值。这样便可以从最外层的ViewGroup按照mFocused变量遍历找到获取焦点的View.</p></blockquote>

<p><em>另外，这里mFocused可以类比触摸事件分发中根据触摸位置定位到的targetView</em></p>

<p>[@View]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchKeyEvent</span><span class="o">(</span><span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Give any attached key listener a first crack at the event.</span>
</span><span class='line'>        <span class="c1">//noinspection SimplifiableIfStatement</span>
</span><span class='line'>        <span class="n">ListenerInfo</span> <span class="n">li</span> <span class="o">=</span> <span class="n">mListenerInfo</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">li</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">li</span><span class="o">.</span><span class="na">mOnKeyListener</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">mViewFlags</span> <span class="o">&amp;</span> <span class="n">ENABLED_MASK</span><span class="o">)</span> <span class="o">==</span> <span class="n">ENABLED</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span> <span class="n">li</span><span class="o">.</span><span class="na">mOnKeyListener</span><span class="o">.</span><span class="na">onKey</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getKeyCode</span><span class="o">(),</span> <span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">dispatch</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">mAttachInfo</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>                <span class="o">?</span> <span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mKeyDispatchState</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出这里有两种方式消费一个事件。</p>

<ol>
<li><p>setOnKeyListener，并且返回true，消费事件。</p></li>
<li><p>event.dispatch()返回true消费事件。这里里面其实是调用了<code>onKeyDown</code>和<code>onKeyUp</code>等方法。所以可以复写View的onKeyDown、onKeyUp等方法，来消费一个按键事件。</p>

<p>​</p></li>
</ol>


<p>来看一下View中的<code>onKeyUp</code>的默认实现：</p>

<p>[@View]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onKeyUp</span><span class="o">(</span><span class="kt">int</span> <span class="n">keyCode</span><span class="o">,</span> <span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">KeyEvent</span><span class="o">.</span><span class="na">isConfirmKey</span><span class="o">(</span><span class="n">keyCode</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">((</span><span class="n">mViewFlags</span> <span class="o">&amp;</span> <span class="n">ENABLED_MASK</span><span class="o">)</span> <span class="o">==</span> <span class="n">DISABLED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">((</span><span class="n">mViewFlags</span> <span class="o">&amp;</span> <span class="n">CLICKABLE</span><span class="o">)</span> <span class="o">==</span> <span class="n">CLICKABLE</span> <span class="o">&amp;&amp;</span> <span class="n">isPressed</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setPressed</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">mHasPerformedLongPress</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// This is a tap, so remove the longpress check</span>
</span><span class='line'>                    <span class="n">removeLongPressCallback</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nf">performClick</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出View会默认消费<strong>确认键</strong>，其他类型的按键一律不消费。</p>

<h4>总结：</h4>

<p>默认情况下，KeyEvent事件从DecorView一层层传递到focused view。对于确认键，则触发click，消费掉，结束。对于其他按键不处理，最终返回false，进行下一步的处理。</p>

<p>其中，我们可以setOnKeyListener或者复写onKeyDown、onKeyUp等方法返回true，来消费事件，阻止下一步的寻找焦点处理。</p>

<p>对于没有消费的事件，来看一下是如何进行下一步处理的！</p>

<h3>3.焦点自动处理流程</h3>

<p>再贴一遍ViewPostImeInputStage的按键处理逻辑：</p>

<p>[@ViewPostImeInputStage]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="nf">processKeyEvent</span><span class="o">(</span><span class="n">QueuedInputEvent</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">KeyEvent</span> <span class="n">event</span> <span class="o">=</span> <span class="o">(</span><span class="n">KeyEvent</span><span class="o">)</span><span class="n">q</span><span class="o">.</span><span class="na">mEvent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 1.Deliver the key to the view hierarchy.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mView</span><span class="o">.</span><span class="na">dispatchKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">FINISH_HANDLED</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 2.Handle automatic focus changes.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">()</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">direction</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getKeyCode</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_LEFT</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasNoModifiers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_LEFT</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_RIGHT</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasNoModifiers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_RIGHT</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_UP</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasNoModifiers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_UP</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_DOWN</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasNoModifiers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_DOWN</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_TAB</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasNoModifiers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_FORWARD</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">hasModifiers</span><span class="o">(</span><span class="n">KeyEvent</span><span class="o">.</span><span class="na">META_SHIFT_ON</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">direction</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_BACKWARD</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">direction</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">View</span> <span class="n">focused</span> <span class="o">=</span> <span class="n">mView</span><span class="o">.</span><span class="na">findFocus</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">focused</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">View</span> <span class="n">v</span> <span class="o">=</span> <span class="n">focused</span><span class="o">.</span><span class="na">focusSearch</span><span class="o">(</span><span class="n">direction</span><span class="o">);</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">v</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">v</span> <span class="o">!=</span> <span class="n">focused</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="c1">// do the math the get the interesting rect</span>
</span><span class='line'>                            <span class="c1">// of previous focused into the coord system of</span>
</span><span class='line'>                            <span class="c1">// newly focused view</span>
</span><span class='line'>                            <span class="n">focused</span><span class="o">.</span><span class="na">getFocusedRect</span><span class="o">(</span><span class="n">mTempRect</span><span class="o">);</span>
</span><span class='line'>                            <span class="k">if</span> <span class="o">(</span><span class="n">mView</span> <span class="k">instanceof</span> <span class="n">ViewGroup</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                                <span class="o">((</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">mView</span><span class="o">).</span><span class="na">offsetDescendantRectToMyCoords</span><span class="o">(</span>
</span><span class='line'>                                        <span class="n">focused</span><span class="o">,</span> <span class="n">mTempRect</span><span class="o">);</span>
</span><span class='line'>                                <span class="o">((</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">mView</span><span class="o">).</span><span class="na">offsetRectIntoDescendantCoords</span><span class="o">(</span>
</span><span class='line'>                                        <span class="n">v</span><span class="o">,</span> <span class="n">mTempRect</span><span class="o">);</span>
</span><span class='line'>                            <span class="o">}</span>
</span><span class='line'>                            <span class="k">if</span> <span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="na">requestFocus</span><span class="o">(</span><span class="n">direction</span><span class="o">,</span> <span class="n">mTempRect</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                                <span class="n">playSoundEffect</span><span class="o">(</span><span class="n">SoundEffectConstants</span>
</span><span class='line'>                                        <span class="o">.</span><span class="na">getContantForFocusDirection</span><span class="o">(</span><span class="n">direction</span><span class="o">));</span>
</span><span class='line'>                                <span class="k">return</span> <span class="n">FINISH_HANDLED</span><span class="o">;</span>
</span><span class='line'>                            <span class="o">}</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// find the best view to give focus to in this non-touch-mode with no-focus</span>
</span><span class='line'>                        <span class="n">View</span> <span class="n">v</span> <span class="o">=</span> <span class="n">focusSearch</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">v</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">v</span><span class="o">.</span><span class="na">requestFocus</span><span class="o">(</span><span class="n">direction</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                            <span class="k">return</span> <span class="n">FINISH_HANDLED</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">FORWARD</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第1步事件在View树中的分发我们已经分析过，对于没有处理的事件进入到<code>processKeyEvent</code>的第2步—— 焦点寻找。</p>

<p>首先，将KeyEvent转换为方向常量<code>View.FOCUS_LEFT</code>、<code>View.FOCUS_RIGHT</code>&hellip;</p>

<p>然后核心逻辑如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">direction</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">View</span> <span class="n">focused</span> <span class="o">=</span> <span class="n">mView</span><span class="o">.</span><span class="na">findFocus</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">focused</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">View</span> <span class="n">v</span> <span class="o">=</span> <span class="n">focused</span><span class="o">.</span><span class="na">focusSearch</span><span class="o">(</span><span class="n">direction</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">v</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">v</span> <span class="o">!=</span> <span class="n">focused</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// do the math the get the interesting rect</span>
</span><span class='line'>                    <span class="c1">// of previous focused into the coord system of</span>
</span><span class='line'>                    <span class="c1">// newly focused view</span>
</span><span class='line'>                    <span class="n">focused</span><span class="o">.</span><span class="na">getFocusedRect</span><span class="o">(</span><span class="n">mTempRect</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">mView</span> <span class="k">instanceof</span> <span class="n">ViewGroup</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="o">((</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">mView</span><span class="o">).</span><span class="na">offsetDescendantRectToMyCoords</span><span class="o">(</span>
</span><span class='line'>                                <span class="n">focused</span><span class="o">,</span> <span class="n">mTempRect</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">((</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">mView</span><span class="o">).</span><span class="na">offsetRectIntoDescendantCoords</span><span class="o">(</span>
</span><span class='line'>                                <span class="n">v</span><span class="o">,</span> <span class="n">mTempRect</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="na">requestFocus</span><span class="o">(</span><span class="n">direction</span><span class="o">,</span> <span class="n">mTempRect</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">playSoundEffect</span><span class="o">(</span><span class="n">SoundEffectConstants</span>
</span><span class='line'>                                <span class="o">.</span><span class="na">getContantForFocusDirection</span><span class="o">(</span><span class="n">direction</span><span class="o">));</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">FINISH_HANDLED</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// find the best view to give focus to in this non-touch-mode with no-focus</span>
</span><span class='line'>                <span class="n">View</span> <span class="n">v</span> <span class="o">=</span> <span class="n">focusSearch</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">v</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">v</span><span class="o">.</span><span class="na">requestFocus</span><span class="o">(</span><span class="n">direction</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">FINISH_HANDLED</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关键代码为<code>focused.focusSearch(direction)</code> , 该方法返回下一个应该获取焦点的View。</p>

<p>进去看下：</p>

<p>[@View]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">View</span> <span class="nf">focusSearch</span><span class="o">(</span><span class="nd">@FocusRealDirection</span> <span class="kt">int</span> <span class="n">direction</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mParent</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mParent</span><span class="o">.</span><span class="na">focusSearch</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>[@ViewGroup]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">View</span> <span class="nf">focusSearch</span><span class="o">(</span><span class="n">View</span> <span class="n">focused</span><span class="o">,</span> <span class="kt">int</span> <span class="n">direction</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isRootNamespace</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// root namespace means we should consider ourselves the top of the</span>
</span><span class='line'>            <span class="c1">// tree for focus searching; otherwise we could be focus searching</span>
</span><span class='line'>            <span class="c1">// into other tabs.  see LocalActivityManager and TabHost for more info</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">FocusFinder</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">findNextFocus</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">focused</span><span class="o">,</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mParent</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mParent</span><span class="o">.</span><span class="na">focusSearch</span><span class="o">(</span><span class="n">focused</span><span class="o">,</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不断地调用Parent的focusSearch，直到isRootNamespace(DecorView)。执行<code>FocusFinder.getInstance().findNextFocus()</code>开始真正地寻找下一个焦点。</p>

<p>FocusFinder是一个单例，寻找焦点的逻辑也非常简单：</p>

<p>[@FocusFinder]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">View</span> <span class="nf">findNextFocus</span><span class="o">(</span><span class="n">ViewGroup</span> <span class="n">root</span><span class="o">,</span> <span class="n">View</span> <span class="n">focused</span><span class="o">,</span> <span class="n">Rect</span> <span class="n">focusedRect</span><span class="o">,</span> <span class="kt">int</span> <span class="n">direction</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">View</span> <span class="n">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">focused</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//1.根据指定属性寻找用户指定的下一个焦点View</span>
</span><span class='line'>            <span class="n">next</span> <span class="o">=</span> <span class="n">findNextUserSpecifiedFocus</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">focused</span><span class="o">,</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;</span> <span class="n">focusables</span> <span class="o">=</span> <span class="n">mTempList</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">focusables</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>            <span class="n">root</span><span class="o">.</span><span class="na">addFocusables</span><span class="o">(</span><span class="n">focusables</span><span class="o">,</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">focusables</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//2. 根据方向位置等寻找下一个焦点View</span>
</span><span class='line'>                <span class="n">next</span> <span class="o">=</span> <span class="n">findNextFocus</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">focused</span><span class="o">,</span> <span class="n">focusedRect</span><span class="o">,</span> <span class="n">direction</span><span class="o">,</span> <span class="n">focusables</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">focusables</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>焦点寻找分为两步：</p>

<ol>
<li><p>findNextUserSpecifiedFocus(root, focused, direction) 寻找用户指定的焦点View。我们可以在xml中指定焦点寻找的规则，此方法就是根据指定的id来返回对应的View，代码如下：</p>

<pre><code class="xml">   &lt;Button
       android:id="@+id/button1"
       android:layout_width="wrap_content"
       android:layout_height="wrap_content"
       android:nextFocusDown="@+id/button2"
       android:nextFocusUp="@+id/button2"
       android:nextFocusLeft="@+id/button2"
       android:nextFocusRight="@+id/button2"
       android:nextFocusForward="@+id/button2"
       android:text="Button"/&gt;
</code></pre></li>
</ol>


<p>2.如果没有指定规则，则根据按键方向，寻找一个最应该获取焦点的View。重点看看这种寻找焦点方式！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;</span> <span class="n">focusables</span> <span class="o">=</span> <span class="n">mTempList</span><span class="o">;</span>
</span><span class='line'> <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">focusables</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>       <span class="n">root</span><span class="o">.</span><span class="na">addFocusables</span><span class="o">(</span><span class="n">df</span><span class="err">`</span><span class="mi">1</span><span class="n">b1</span> <span class="o">,</span> <span class="n">direction</span><span class="o">)</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(!</span><span class="n">focusables</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">next</span> <span class="o">=</span> <span class="n">findNextFocus</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">focused</span><span class="o">,</span> <span class="n">focusedRect</span><span class="o">,</span> <span class="n">direction</span><span class="o">,</span> <span class="n">focusables</span><span class="o">);</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'> <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">focusables</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，构建一个focusables列表，其中包含root下所有可能获取焦点的View.</p>

<p>[@ViewGroup]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFocusables</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;</span> <span class="n">views</span><span class="o">,</span> <span class="kt">int</span> <span class="n">direction</span><span class="o">,</span> <span class="kt">int</span> <span class="n">focusableMode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">focusableCount</span> <span class="o">=</span> <span class="n">views</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">descendantFocusability</span> <span class="o">=</span> <span class="n">getDescendantFocusability</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">descendantFocusability</span> <span class="o">!=</span> <span class="n">FOCUS_BLOCK_DESCENDANTS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">mChildrenCount</span><span class="o">;</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">View</span><span class="o">[]</span> <span class="n">children</span> <span class="o">=</span> <span class="n">mChildren</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">View</span> <span class="n">child</span> <span class="o">=</span> <span class="n">children</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">((</span><span class="n">child</span><span class="o">.</span><span class="na">mViewFlags</span> <span class="o">&amp;</span> <span class="n">VISIBILITY_MASK</span><span class="o">)</span> <span class="o">==</span> <span class="n">VISIBLE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">child</span><span class="o">.</span><span class="na">addFocusables</span><span class="o">(</span><span class="n">views</span><span class="o">,</span> <span class="n">direction</span><span class="o">,</span> <span class="n">focusableMode</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">descendantFocusability</span> <span class="o">!=</span> <span class="n">FOCUS_AFTER_DESCENDANTS</span>
</span><span class='line'>                <span class="c1">// No focusable descendants</span>
</span><span class='line'>                <span class="o">||</span> <span class="n">focusableCount</span> <span class="o">==</span> <span class="n">views</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">addFocusables</span><span class="o">(</span><span class="n">views</span><span class="o">,</span> <span class="n">direction</span><span class="o">,</span> <span class="n">focusableMode</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>这里涉及到descendantFocusability这个概念，这个变量有三个值，可以在XML中给ViewGroup设置，用来控制后代的焦点行为。</p>

<ol>
<li>android:descendantFocusability=&ldquo;blocksDescendants&rdquo;   阻止后代获取焦点</li>
<li>android:descendantFocusability=&ldquo;afterDescendants&rdquo;      如果没有任何一个后代可以获取焦点的时候，再获取焦点</li>
<li>android:descendantFocusability=&ldquo;beforeDescendants&rdquo;    在后代之前获取焦点</li>
</ol>


<p>这几个属性除了在这里有影响，对ViewGroup的requestFocus方法也有影响：</p>

<pre><code class="java">public boolean requestFocus(int direction, Rect previouslyFocusedRect) {
        int descendantFocusability = getDescendantFocusability();

        switch (descendantFocusability) {
            case FOCUS_BLOCK_DESCENDANTS:
                return super.requestFocus(direction, previouslyFocusedRect);
            case FOCUS_BEFORE_DESCENDANTS: {
                final boolean took = super.requestFocus(direction, previouslyFocusedRect);
                return took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect);
            }
            case FOCUS_AFTER_DESCENDANTS: {
                final boolean took = onRequestFocusInDescendants(direction, previouslyFocusedRect);
                return took ? took : super.requestFocus(direction, previouslyFocusedRect);
            }
            default:
                throw new IllegalStateException("descendant focusability must be "
                        + "one of FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS "
                        + "but is " + descendantFocusability);
        }
    }
</code></pre></blockquote>

<p>构建完焦点列表之后：</p>

<p>[@FocusFinder]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">View</span> <span class="nf">findNextFocus</span><span class="o">(</span><span class="n">ViewGroup</span> <span class="n">root</span><span class="o">,</span> <span class="n">View</span> <span class="n">focused</span><span class="o">,</span> <span class="n">Rect</span> <span class="n">focusedRect</span><span class="o">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">direction</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;</span> <span class="n">focusables</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">focused</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">focusedRect</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">focusedRect</span> <span class="o">=</span> <span class="n">mFocusedRect</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="c1">// fill in interesting rect from focused</span>
</span><span class='line'>            <span class="c1">//获取焦点View的坐标</span>
</span><span class='line'>            <span class="n">focused</span><span class="o">.</span><span class="na">getFocusedRect</span><span class="o">(</span><span class="n">focusedRect</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">//将焦点View的坐标转换为root坐标系的坐标</span>
</span><span class='line'>            <span class="n">root</span><span class="o">.</span><span class="na">offsetDescendantRectToMyCoords</span><span class="o">(</span><span class="n">focused</span><span class="o">,</span> <span class="n">focusedRect</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">//省略...</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">direction</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_FORWARD</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_BACKWARD</span><span class="o">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nf">findNextFocusInRelativeDirection</span><span class="o">(</span><span class="n">focusables</span><span class="o">,</span> <span class="n">root</span><span class="o">,</span> <span class="n">focused</span><span class="o">,</span> <span class="n">focusedRect</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_DOWN</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_LEFT</span><span class="o">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_RIGHT</span><span class="o">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nf">findNextFocusInAbsoluteDirection</span><span class="o">(</span><span class="n">focusables</span><span class="o">,</span> <span class="n">root</span><span class="o">,</span> <span class="n">focused</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">focusedRect</span><span class="o">,</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Unknown direction: &quot;</span> <span class="o">+</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>ViewGroup中有两个方法用来进行坐标系转换：</p>

<p>1.offsetDescendantRectToMyCoords   将某个后代的坐标系转换到当前ViewGroup的坐标系中</p>

<p>2.offsetRectIntoDescendantCoords      将当前ViewGroup的坐标转换到后代坐标系中</p></blockquote>

<p>这里转换过后，我们获取到了当前焦点的一块矩形区域 focusedRect，用这块区域+按键方向来查找下一个焦点。</p>

<p>[@FocusFinder]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">View</span> <span class="nf">findNextFocusInAbsoluteDirection</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;</span> <span class="n">focusables</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">root</span><span class="o">,</span> <span class="n">View</span> <span class="n">focused</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Rect</span> <span class="n">focusedRect</span><span class="o">,</span> <span class="kt">int</span> <span class="n">direction</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// initialize the best candidate to something impossible</span>
</span><span class='line'>        <span class="c1">// (so the first plausible view will become the best choice)</span>
</span><span class='line'>          <span class="c1">//1.先把把矩形设置成最差的情况，在接下来的匹配中被替换掉。</span>
</span><span class='line'>        <span class="n">mBestCandidateRect</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">focusedRect</span><span class="o">);</span>
</span><span class='line'>        <span class="k">switch</span><span class="o">(</span><span class="n">direction</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_LEFT</span><span class="o">:</span>
</span><span class='line'>                <span class="n">mBestCandidateRect</span><span class="o">.</span><span class="na">offset</span><span class="o">(</span><span class="n">focusedRect</span><span class="o">.</span><span class="na">width</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_RIGHT</span><span class="o">:</span>
</span><span class='line'>                <span class="n">mBestCandidateRect</span><span class="o">.</span><span class="na">offset</span><span class="o">(-(</span><span class="n">focusedRect</span><span class="o">.</span><span class="na">width</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">),</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_UP</span><span class="o">:</span>
</span><span class='line'>                <span class="n">mBestCandidateRect</span><span class="o">.</span><span class="na">offset</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">focusedRect</span><span class="o">.</span><span class="na">height</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">View</span><span class="o">.</span><span class="na">FOCUS_DOWN</span><span class="o">:</span>
</span><span class='line'>                <span class="n">mBestCandidateRect</span><span class="o">.</span><span class="na">offset</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="o">-(</span><span class="n">focusedRect</span><span class="o">.</span><span class="na">height</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">View</span> <span class="n">closest</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//2.遍历focusables，找到最接近的View</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">numFocusables</span> <span class="o">=</span> <span class="n">focusables</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numFocusables</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">View</span> <span class="n">focusable</span> <span class="o">=</span> <span class="n">focusables</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// only interested in other non-root views</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">focusable</span> <span class="o">==</span> <span class="n">focused</span> <span class="o">||</span> <span class="n">focusable</span> <span class="o">==</span> <span class="n">root</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// get focus bounds of other view in same coordinate system</span>
</span><span class='line'>            <span class="n">focusable</span><span class="o">.</span><span class="na">getFocusedRect</span><span class="o">(</span><span class="n">mOtherRect</span><span class="o">);</span>
</span><span class='line'>            <span class="n">root</span><span class="o">.</span><span class="na">offsetDescendantRectToMyCoords</span><span class="o">(</span><span class="n">focusable</span><span class="o">,</span> <span class="n">mOtherRect</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">isBetterCandidate</span><span class="o">(</span><span class="n">direction</span><span class="o">,</span> <span class="n">focusedRect</span><span class="o">,</span> <span class="n">mOtherRect</span><span class="o">,</span> <span class="n">mBestCandidateRect</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mBestCandidateRect</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">mOtherRect</span><span class="o">);</span>
</span><span class='line'>                <span class="n">closest</span> <span class="o">=</span> <span class="n">focusable</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">closest</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>遍历focusables列表，利用isBetterCandidate方法找到最合适的View作为下一个焦点:</p>

<p>[@FocusFinder]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">boolean</span> <span class="nf">isBetterCandidate</span><span class="o">(</span><span class="kt">int</span> <span class="n">direction</span><span class="o">,</span> <span class="n">Rect</span> <span class="n">source</span><span class="o">,</span> <span class="n">Rect</span> <span class="n">rect1</span><span class="o">,</span> <span class="n">Rect</span> <span class="n">rect2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// to be a better candidate, need to at least be a candidate in the first</span>
</span><span class='line'>        <span class="c1">// place :)</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">isCandidate</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">rect1</span><span class="o">,</span> <span class="n">direction</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// we know that rect1 is a candidate.. if rect2 is not a candidate,</span>
</span><span class='line'>        <span class="c1">// rect1 is better</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">isCandidate</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">rect2</span><span class="o">,</span> <span class="n">direction</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// if rect1 is better by beam, it wins</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">beamBeats</span><span class="o">(</span><span class="n">direction</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">rect1</span><span class="o">,</span> <span class="n">rect2</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// if rect2 is better, then rect1 cant&#39; be :)</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">beamBeats</span><span class="o">(</span><span class="n">direction</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">rect2</span><span class="o">,</span> <span class="n">rect1</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// otherwise, do fudge-tastic comparison of the major and minor axis</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">getWeightedDistanceFor</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">majorAxisDistance</span><span class="o">(</span><span class="n">direction</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">rect1</span><span class="o">),</span>
</span><span class='line'>                        <span class="n">minorAxisDistance</span><span class="o">(</span><span class="n">direction</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">rect1</span><span class="o">))</span>
</span><span class='line'>                <span class="o">&lt;</span> <span class="n">getWeightedDistanceFor</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">majorAxisDistance</span><span class="o">(</span><span class="n">direction</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">rect2</span><span class="o">),</span>
</span><span class='line'>                        <span class="n">minorAxisDistance</span><span class="o">(</span><span class="n">direction</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">rect2</span><span class="o">)));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里根据direction、sourceRect来比较Rect1和Rect2谁更合适，有兴趣可以看下。</p>

<p>至此，已经找到了下一个要获取焦点的View，在<code>ViewPostImeInputState.processKeyEvent</code>中对focusedView执行<em>requestFocus</em>方法请求焦点，其中会回调<code>onFocusChange</code>等焦点变化方法，并且更新前面提到过的<code>mFocused</code>链。</p>

<p>在整个焦点寻找的过程中，我们可以做以下事情来改变它原来寻焦点的逻辑：</p>

<ul>
<li>xml中指定left/top/right/down/forward对应的view。</li>
<li>复写addFocusables方法，根据我们的逻辑来添加候选的focusable views。</li>
<li>重写focusSearch方法，执行我们的焦点寻找逻辑，返回下一个获取焦点的View。比如RecyclerView就重写了focusSearch方法，将焦点寻找的逻辑交给自己的LayoutManager处理。</li>
</ul>


<h3>相关资料</h3>

<p><a href="http://gityuan.com/2015/09/19/android-touch/">Android触摸事件分发机制</a></p>

<p><a href="https://juejin.im/post/58f8d362ac502e006391bf63">焦点寻址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android NFC开发入门]]></title>
    <link href="http://www.monkeyliu.com/blog/2017/02/28/androidnfc/"/>
    <updated>2017-02-28T13:08:50+08:00</updated>
    <id>http://www.monkeyliu.com/blog/2017/02/28/androidnfc</id>
    <content type="html"><![CDATA[<h2>NFC的几个概念</h2>

<ul>
<li><p><strong>接触式IC卡</strong> 例如手机SIM卡、金融IC卡。</p></li>
<li><p><strong>非接触式IC卡</strong> 又称射频卡，将无线射频识别技术和IC卡结合起来，免接触。</p></li>
<li><p><strong>RFID</strong> 无线射频识别，一种无线通讯技术。</p>

<p>基本原理：阅读器将电信号转换为无线电信号（电磁波的一个频带）发给标签，标签使用接收到的无线电波能量供电，然后将存储在自身数据以无线电信号的形式应答给阅读器，以读取到标签中的数据。</p></li>
<li><p><strong>NFC</strong>（Near Field Communication） 短距离无线通讯技术，基于RFID，一般在10cm之内使用13.56MHz频率通讯</p></li>
</ul>


<!-- more -->


<hr />

<h2>Android如何使用NFC</h2>

<h3>权限声明</h3>

<p>在AndroidManifest.xml中如下申请NFC权限:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.NFC&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加下面一行，保证在GooglePlay商店此应用只显示给带NFC硬件的设备</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-feature</span> <span class="na">android:name=</span><span class="s">&quot;android.hardware.nfc&quot;</span> <span class="na">android:required=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在代码中动态判断设备是否支持NFC：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">NfcAdapter</span><span class="o">.</span><span class="na">getDefaultAdapter</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;monkey&quot;</span><span class="o">,</span><span class="s">&quot;设备不支持NFC.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Android设备支持三种模式的NFC操作</h3>

<ol>
<li><strong>Reader/writer mode</strong> 通过Android设备对NFC标签进行读写数据操作。</li>
<li><strong>P2P mode</strong> NFC设备之间交换数据，AndroidBeam使用这种模式。</li>
<li><strong>Card emulation mode</strong> NFC设备模拟成NFC标签。</li>
</ol>


<h3>Reader/write mode</h3>

<p>Android通过标签分发系统分析发现的NFC标签，封装成对应的Intent发给Android上层进行对应的处理。</p>

<p>Android中关于NFC有三种类型的Action（优先级由高到低）：</p>

<p><code>ACTION_NDEF_DISCOVERED</code> <code>ACTION_TECH_DISCOVERED</code> <code>ACTION_TAG_DISCOVERED</code></p>

<h4>这里的<em>优先级</em>可以通过标签分发系统的机制来解释:</h4>

<ol>
<li>如果一个包含<strong>NDEF</strong>格式数据的NFC标签被发现，Android优先发送带<code>ACTION_NDEF_DISCOVERED</code>action的Intent。</li>
<li>如果没有Activity处理<code>ACTION_NDEF_DISCOVERED</code>类型的intent <em>或者</em> NFC标签不包含<strong>NDEF</strong>格式的数据（使用了其他已知技术）<em>或者</em> <strong>NDEF</strong>格式的标签不能被标签分发系统映射成正确的Intent，则会发送优先级较低的<code>ACTION_TECH_DISCOVERED</code>intent来尝试启动Activity（不会发送<code>ACTION_NDEF_DISCOVERED</code>）。</li>
<li>如果仍然没有Activity响应上述两个Action，则系统会发送优先级最低的<code>ACTION_TAG_DISCOVERED</code>的Intent。</li>
</ol>


<p>图为标签分发系统：</p>

<p><img src="http://www.monkeyliu.com/images/articles/nfc_tag_dispatch.png" alt="nfc_tag_dispatch" /></p>

<h4>NFC数据格式</h4>

<p>NFC的数据格式可以分为NDEF和非NDEF两种。<strong>NDEF</strong>是NFC Forum定义的一种标准格式，在Android中得到最大范围的支持，是Android最推荐使用的格式。</p>

<ul>
<li><p><strong>NDEF数据</strong>在AndroidSDK中被封装成一个包含多个<strong>NdefRecord</strong>的<strong>NdefMessage</strong>，<strong>android.nfc.tech.Ndef</strong>类封装了各种便捷的读写数据的操作。</p>

<p>前面说过当Android设备发现NDEF格式的标签之后会发出<code>ACTION_NDEF_DISCOVERED</code>类型的Intent。通常在intent中还会带上更加具体的mime type &amp; URI等数据，以便筛选更加具体的Activity来进行处理（这个是Android推荐使用这个格式的原因之一）。下面就来说说，NDEF具体的数据格式以及Android如何分析NDEF数据来生成对应的Intent。</p>

<p><strong>NDEF数据格式</strong>：</p>

<p><img src="http://www.monkeyliu.com/images/articles/ndef_protocol.png" alt="ndef_protocol" /></p>

<ol>
<li><strong>TNF</strong> 3bits的字段，标识了如何解析第二个字段type。包含的值见表一：</li>
</ol>


<p>表一，TNF字段以及映射：</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> TNF               </th>
<th> 映射的Intent                                </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> TNF_ABSOLUTE_URI  </td>
<td> 基于<em>type</em>的URI                             </td>
</tr>
<tr>
<td style="text-align:left;"> TNF_EMPTY         </td>
<td> 无映射，降级到<code>ACTION_TECH_DISCOVERED</code>          </td>
</tr>
<tr>
<td style="text-align:left;"> TNF_EXTERNAL_TYPE </td>
<td> 基于<em>type</em>的URI. type形式为 <domain>:<service>。映射后的URI形式为： <code>vnd.android.nfc://ext/&lt;domain&gt;:&lt;service&gt;</code>. </td>
</tr>
<tr>
<td style="text-align:left;"> TNF_MIME_MEDIA    </td>
<td> 基于type的MIME类型                            </td>
</tr>
<tr>
<td style="text-align:left;"> TNF_UNCHANGED     </td>
<td> 无效，降级为<code>ACTION_TECH_DISCOVERED</code>           </td>
</tr>
<tr>
<td style="text-align:left;"> TNF_UNKNOWN       </td>
<td> 降级为<code>ACTION_TECH_DISCOVERED</code>              </td>
</tr>
<tr>
<td style="text-align:left;"> TNF_WELL_KNOWN    </td>
<td> 基于type（RTD)的MIME type or URI ，需要再根据type的值进行映射（见表二） </td>
</tr>
</tbody>
</table>


<p>表二，RTDs for TNF_WELL_KNOWN以及映射：</p>

<table>
<thead>
<tr>
<th> RTD                     </th>
<th> 映射的Intent                   </th>
</tr>
</thead>
<tbody>
<tr>
<td> RTD_ALTERNATIVE_CARRIER </td>
<td> 降级为<code>ACTION_TECH_DISCOVERED</code> </td>
</tr>
<tr>
<td> RTD_HANDOVER_CARRIER    </td>
<td> 降级为<code>ACTION_TECH_DISCOVERED</code> </td>
</tr>
<tr>
<td> RTD_HANDOVER_REQUEST    </td>
<td> 降级为<code>ACTION_TECH_DISCOVERED</code> </td>
</tr>
<tr>
<td> RTD_HANDOVER_SELECT     </td>
<td> 降级为<code>ACTION_TECH_DISCOVERED</code> </td>
</tr>
<tr>
<td> RTD_SMART_POSTER        </td>
<td> 基于解析payload的URI             </td>
</tr>
<tr>
<td> RTD_TEXT                </td>
<td> MIME类型 text/p               </td>
</tr>
<tr>
<td> RTD_URI                 </td>
<td> 基于payloadd的URI              </td>
</tr>
</tbody>
</table>


<ol>
<li><strong>type</strong>,描述Record的类型，如果TNF为TNF_WELL_KNOWN，则这个字段指定RTD，见上表二。</li>
<li><strong>ID</strong>，字段的唯一标识，一般不常用，可以用来标识一张标签。</li>
<li><strong>payload</strong>，有效荷载，保存真实的数据。</li>
</ol>


<p>​</p>

<p><strong>创建各种类型的NDEF数据&amp;响应对应NDEF 数据的IntentFilter实例</strong></p>

<p>​1. 创建TNF_ABSOLUTE_URI类型数据:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">NdefRecord</span> <span class="n">uriRecord</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">NdefRecord</span><span class="o">(</span>
</span><span class='line'><span class="n">NdefRecord</span><span class="o">.</span><span class="na">TNF_ABSOLUTE_URI</span> <span class="o">,</span>
</span><span class='line'><span class="s">&quot;http://developer.android.com/index.html&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">Charset</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;US-ASCII&quot;</span><span class="o">)),</span>
</span><span class='line'><span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>​ 响应的intent filter：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.nfc.action.NDEF_DISCOVERED&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">&quot;http&quot;</span>
</span><span class='line'>        <span class="na">android:host=</span><span class="s">&quot;developer.android.com&quot;</span>
</span><span class='line'>        <span class="na">android:pathPrefix=</span><span class="s">&quot;/index.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/intent-filter&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>​ 2. 创建TNF_MIME_MEDIA类型的数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="n">NdefRecord</span> <span class="n">mimeRecord</span> <span class="o">=</span> <span class="n">NdefRecord</span><span class="o">.</span><span class="na">createMime</span><span class="o">(</span><span class="s">&quot;application/vnd.com.example.android.beam&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;Beam me up, Android&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">Charset</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;US-ASCII&quot;</span><span class="o">)));</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>对应的intent filter:
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>      <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.nfc.action.NDEF_DISCOVERED&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;data</span> <span class="na">android:mimeType=</span><span class="s">&quot;application/vnd.com.example.android.beam&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/intent-filter&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>​ 3. 创建TNF_EXTERNAL_TYPE类型的数据:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kt">byte</span><span class="o">[]</span> <span class="n">payload</span><span class="o">;</span> <span class="c1">//assign to your data</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">domain</span> <span class="o">=</span> <span class="s">&quot;com.example&quot;</span><span class="o">;</span> <span class="c1">//usually your app&#39;s package name</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">type</span> <span class="o">=</span> <span class="s">&quot;externalType&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="n">NdefRecord</span> <span class="n">extRecord</span> <span class="o">=</span> <span class="n">NdefRecord</span><span class="o">.</span><span class="na">createExternal</span><span class="o">(</span><span class="n">domain</span><span class="o">,</span> <span class="n">type</span><span class="o">,</span> <span class="n">payload</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>对应的intent filter:
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>      <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.nfc.action.NDEF_DISCOVERED&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">&quot;vnd.android.nfc&quot;</span>
</span><span class='line'>          <span class="na">android:host=</span><span class="s">&quot;ext&quot;</span>
</span><span class='line'>          <span class="na">android:pathPrefix=</span><span class="s">&quot;/com.example:externalType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/intent-filter&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>​ 4. 创建TNF_WELL_KNOWN with RTD_TEXT类型的数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">NdefRecord</span> <span class="nf">createTextRecord</span><span class="o">(</span><span class="n">String</span> <span class="n">payload</span><span class="o">,</span> <span class="n">Locale</span> <span class="n">locale</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">encodeInUtf8</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">langBytes</span> <span class="o">=</span> <span class="n">locale</span><span class="o">.</span><span class="na">getLanguage</span><span class="o">().</span><span class="na">getBytes</span><span class="o">(</span><span class="n">Charset</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;US-ASCII&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">Charset</span> <span class="n">utfEncoding</span> <span class="o">=</span> <span class="n">encodeInUtf8</span> <span class="o">?</span> <span class="n">Charset</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">)</span> <span class="o">:</span> <span class="n">Charset</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;UTF-16&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">textBytes</span> <span class="o">=</span> <span class="n">payload</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">utfEncoding</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">utfBit</span> <span class="o">=</span> <span class="n">encodeInUtf8</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">status</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="o">(</span><span class="n">utfBit</span> <span class="o">+</span> <span class="n">langBytes</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1</span> <span class="o">+</span> <span class="n">langBytes</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="n">textBytes</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>    <span class="n">data</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">langBytes</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">langBytes</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">textBytes</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">langBytes</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">textBytes</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="n">NdefRecord</span> <span class="n">record</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">NdefRecord</span><span class="o">(</span><span class="n">NdefRecord</span><span class="o">.</span><span class="na">TNF_WELL_KNOWN</span><span class="o">,</span>
</span><span class='line'>    <span class="n">NdefRecord</span><span class="o">.</span><span class="na">RTD_TEXT</span><span class="o">,</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">record</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>​ 对应的Intent filter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.nfc.action.NDEF_DISCOVERED&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;data</span> <span class="na">android:mimeType=</span><span class="s">&quot;text/plain&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/intent-filter&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>​</p>

<p>​ <strong>读写NDEF格式的NFC数据</strong>：</p>

<p>​ 1. Intent中包含三个相关的数据：</p>

<p>​ <strong>EXTRA_TAG</strong> 扫描到的标签对象</p>

<p>​ <strong>EXTRA_NDEF_MESSAGES</strong> 从标签中获取到的NDEF数据对象，只有ACTION_NDEF_DISCOVERED类型的                Intent包含</p>

<p>​ <strong>EXTRA_ID</strong> 标签的ID（可选）</p>

<p>​ 2 .解析NDEF数据的代码一般为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onNewIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onNewIntent</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">intent</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">NfcAdapter</span><span class="o">.</span><span class="na">ACTION_NDEF_DISCOVERED</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">intent</span><span class="o">.</span><span class="na">getAction</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Parcelable</span><span class="o">[]</span> <span class="n">rawMessages</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">intent</span><span class="o">.</span><span class="na">getParcelableArrayExtra</span><span class="o">(</span><span class="n">NfcAdapter</span><span class="o">.</span><span class="na">EXTRA_NDEF_MESSAGES</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">rawMessages</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">NdefMessage</span><span class="o">[]</span> <span class="n">messages</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NdefMessage</span><span class="o">[</span><span class="n">rawMessages</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rawMessages</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">messages</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">NdefMessage</span><span class="o">)</span> <span class="n">rawMessages</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="c1">// Process the messages array.</span>
</span><span class='line'>            <span class="o">...</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>​ 写NDEF数据的代码一般为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onNewIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onNewIntent</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Tag</span> <span class="n">tag</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getParcelableExtra</span><span class="o">(</span><span class="n">NfcAdapter</span><span class="o">.</span><span class="na">EXTRA_TAG</span><span class="o">);</span>
</span><span class='line'>        <span class="n">NdefRecord</span> <span class="n">ndefRecord</span> <span class="o">=</span> <span class="n">NdefRecord</span><span class="o">.</span><span class="na">createExternal</span><span class="o">(</span><span class="s">&quot;domain&quot;</span><span class="o">,</span> <span class="s">&quot;service&quot;</span><span class="o">,</span> <span class="s">&quot;content&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>        <span class="n">NdefMessage</span> <span class="n">ndefMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">NdefMessage</span><span class="o">(</span><span class="k">new</span> <span class="n">NdefRecord</span><span class="o">[]</span> <span class="o">{</span><span class="n">ndefRecord</span><span class="o">});</span>
</span><span class='line'>        <span class="n">Ndef</span> <span class="n">ndef</span> <span class="o">=</span> <span class="n">Ndef</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">tag</span><span class="o">);</span> <span class="c1">//获取Ndef tech的对象</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">ndef</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//非NDEF数据</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ndef</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</span><span class='line'>                <span class="n">ndef</span><span class="o">.</span><span class="na">writeNdefMessage</span><span class="o">(</span><span class="n">ndefMessage</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FormatException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">//可格式化为NDEF数据</span>
</span><span class='line'>            <span class="n">NdefFormatable</span> <span class="n">ndefFormatable</span> <span class="o">=</span> <span class="n">NdefFormatable</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">tag</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">ndefFormatable</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ndefFormatable</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">ndefFormatable</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">ndefMessage</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FormatException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>​</p>

<ul>
<li><p><strong>非NDEF数据</strong>可以配合<strong>android.nfc.tech</strong>包下的对应的类来进行使用。</p>

<p>每个NFC标签可能支持不同种类的<strong>technologies</strong>(不同格式数据的读写），可以通过如下代码获取标签支持的<strong>techonologies</strong>:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="n">mTag</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getParcelableExtra</span><span class="o">(</span><span class="n">NfcAdapter</span><span class="o">.</span><span class="na">EXTRA_TAG</span><span class="o">);</span>
</span><span class='line'>  <span class="n">String</span><span class="o">[]</span> <span class="n">teches</span> <span class="o">=</span> <span class="n">mTag</span><span class="o">.</span><span class="na">getTechList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>  Android支持的常见Technology如下表：</p>

<table>
<thead>
<tr>
<th> Class            </th>
<th> Description                              </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>TagTechnology</code>  </td>
<td> The interface that all tag technology classes must implement. </td>
</tr>
<tr>
<td> <code>NfcA</code>           </td>
<td> Provides access to NFC-A (ISO 14443-3A) properties and I/O operations. </td>
</tr>
<tr>
<td> <code>NfcB</code>           </td>
<td> Provides access to NFC-B (ISO 14443-3B) properties and I/O operations. </td>
</tr>
<tr>
<td> <code>NfcF</code>           </td>
<td> Provides access to NFC-F (JIS 6319-4) properties and I/O operations. </td>
</tr>
<tr>
<td> <code>NfcV</code>           </td>
<td> Provides access to NFC-V (ISO 15693) properties and I/O operations. </td>
</tr>
<tr>
<td> <code>IsoDep</code>         </td>
<td> Provides access to ISO-DEP (ISO 14443-4) properties and I/O operations. </td>
</tr>
<tr>
<td> <code>Ndef</code>           </td>
<td> Provides access to NDEF data and operations on NFC tags that have been formatted as NDEF. </td>
</tr>
<tr>
<td> <code>NdefFormatable</code> </td>
<td> Provides a format operations for tags that may be NDEF formattable. </td>
</tr>
</tbody>
</table>


<p>Android设备可选支持的Technology：</p>

<table>
<thead>
<tr>
<th> Class              </th>
<th> Description                              </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>MifareClassic</code>    </td>
<td> Provides access to MIFARE Classic properties and I/O operations, if this Android device supports MIFARE. </td>
</tr>
<tr>
<td> <code>MifareUltralight</code> </td>
<td> Provides access to MIFARE Ultralight properties and I/O operations, if this Android device supports MIFARE. </td>
</tr>
</tbody>
</table>


<p>前面讲解过，标签在某些情况下会降级为<code>ACTION_TECH_DISCOVERED</code>类型的Intent，对应的xml文件为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.nfc.action.TECH_DISCOVERED&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">&quot;android.nfc.action.TECH_DISCOVERED&quot;</span>
</span><span class='line'>    <span class="na">android:resource=</span><span class="s">&quot;@xml/nfc_tech_filter&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<strong>android:resource=&ldquo;@xml/nfc_tech_filter&rdquo;</strong>指定NFC technology的过滤文件，放在<code>res/xml</code>目录下任意命名。其中指定的technologies必须是所识别的标签支持的technologies的子集，才能匹配到。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;resources</span> <span class="na">xmlns:xliff=</span><span class="s">&quot;urn:oasis:names:tc:xliff:document:1.2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tech-list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.IsoDep<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.NfcA<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.NfcB<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.NfcF<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.NfcV<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.Ndef<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.NdefFormatable<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.MifareClassic<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.MifareUltralight<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tech-list&gt;</span>
</span><span class='line'><span class="nt">&lt;/resources&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者分开多个<strong><tech-list></strong>,他们之间相互独立，匹配一个就好。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;resources</span> <span class="na">xmlns:xliff=</span><span class="s">&quot;urn:oasis:names:tc:xliff:document:1.2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tech-list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.NfcA<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.Ndef<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tech-list&gt;</span>
</span><span class='line'><span class="nt">&lt;/resources&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;resources</span> <span class="na">xmlns:xliff=</span><span class="s">&quot;urn:oasis:names:tc:xliff:document:1.2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tech-list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.NfcB<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tech&gt;</span>android.nfc.tech.Ndef<span class="nt">&lt;/tech&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tech-list&gt;</span>
</span><span class='line'><span class="nt">&lt;/resources&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>各种类型的非NDEF数据格式的读写</strong></p>

<p>查看对应的规格书按照协议来使用，在developer.android.com中可以简单地查看一种数据格式的说明：如 <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html">MIFAREClassic</a></p>

<h3>P2P mode</h3>

<p>即AndroidBeam功能，使两台Android设备进行快速的数据交换。发送数据的设备打开发送数据的应用（相当于一张标签），接受数据的设备解锁靠近发送数据的设备之后，发送数据的设备UI显示“Touch to Beam",点击即可将数据发送给接收端（接收端设备接受到数据通过标签分发系统决定打开的应用进行处理）。</p>

<p>相关的API有两个：</p>

<p><strong>NfcAdapter.setNdefPushMessage()</strong> :发送端设置要发送的NDEF数据。两台设备靠近之后点击”Touch to Beam"发送此数据。</p>

<p><strong>NfcAdapter.setNdefPushMessageCallback()</strong>:此方法接受一个<strong>NfcAdapter.CreateNdefMessageCallback</strong>类型的回调接口，此接口在两台设备靠近时回调进行NDEF数据的创建，然后点击“Touch to Beam"发送数据。</p>

<p>两个接口的唯一不同在于：接口1一开始便确定了要发送的数据；接口2在两个设备靠近时才创建要发送的NDEF数据。</p>

<p><em>代码示例</em>(Demo中onCreate中为发送端逻辑，onResume中为接收端处理逻辑):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">NfcAdapter</span> <span class="n">mNfcAdapter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mNfcAdapter</span> <span class="o">=</span> <span class="n">NfcAdapter</span><span class="o">.</span><span class="na">getDefaultAdapter</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mNfcAdapter</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;not support nfc&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>            <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">NdefRecord</span> <span class="n">ndefRecord</span> <span class="o">=</span>         <span class="n">NdefRecord</span><span class="o">.</span><span class="na">createMime</span><span class="o">(</span><span class="s">&quot;application/vnd.com.example.android.beam&quot;</span><span class="o">,</span> <span class="s">&quot;hello android&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>        <span class="n">mNfcAdapter</span><span class="o">.</span><span class="na">setNdefPushMessageCallback</span><span class="o">(</span><span class="k">new</span> <span class="n">NfcAdapter</span><span class="o">.</span><span class="na">CreateNdefMessageCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">NdefMessage</span> <span class="nf">createNdefMessage</span><span class="o">(</span><span class="n">NfcEvent</span> <span class="n">nfcEvent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;seewo&quot;</span><span class="o">,</span> <span class="s">&quot;createNdefMessage&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">NdefMessage</span><span class="o">(</span><span class="n">ndefRecord</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="c1">//        mNfcAdapter.setNdefPushMessage(new NdefMessage(ndefRecord), this); //接口一的实现</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//接收端的处理逻辑</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">NfcAdapter</span><span class="o">.</span><span class="na">ACTION_NDEF_DISCOVERED</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">getIntent</span><span class="o">().</span><span class="na">getAction</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">processIntent</span><span class="o">(</span><span class="n">getIntent</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNewIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setIntent</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">processIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Parcelable</span><span class="o">[]</span> <span class="n">rawMessages</span> <span class="o">=</span>             <span class="n">intent</span><span class="o">.</span><span class="na">getParcelableArrayExtra</span><span class="o">(</span><span class="n">NfcAdapter</span><span class="o">.</span><span class="na">EXTRA_NDEF_MESSAGES</span><span class="o">);</span>
</span><span class='line'>        <span class="n">NdefMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="o">(</span><span class="n">NdefMessage</span><span class="o">)</span> <span class="n">rawMessages</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">info</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">getRecords</span><span class="o">()[</span><span class="mi">0</span><span class="o">].</span><span class="na">getPayload</span><span class="o">());</span>
</span><span class='line'>        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">info</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Card emulation mode</h3>

<p>Android4.4之前通过在Android设备中内置一个芯片来实现。通信路径如下图：</p>

<p><img src="http://www.monkeyliu.com/images/articles/NFC_SE.png" alt="NFC_SE" /></p>

<p>Android4.4之后可以通过纯软件模拟NFC卡。通信路径如下图：</p>

<p><img src="http://www.monkeyliu.com/images/articles/NFC_HCE.png" alt="NFC_HCE" /></p>

<p>在Android上层程序只需实现一个服务，并且给服务绑定一个ID，便可以模拟成NFC卡，根据读卡器发出的ID响应数据。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyHostApduService</span> <span class="kd">extends</span> <span class="n">HostApduService</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">processCommandApdu</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">apdu</span><span class="o">,</span> <span class="n">Bundle</span> <span class="n">extras</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDeactivated</span><span class="o">(</span><span class="kt">int</span> <span class="n">reason</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;service</span> <span class="na">android:name=</span><span class="s">&quot;.MyHostApduService&quot;</span> <span class="na">android:exported=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">android:permission=</span><span class="s">&quot;android.permission.BIND_NFC_SERVICE&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.nfc.cardemulation.action.HOST_APDU_SERVICE&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">&quot;android.nfc.cardemulation.host_apdu_service&quot;</span>
</span><span class='line'>               <span class="na">android:resource=</span><span class="s">&quot;@xml/apduservice&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/service&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;host-apdu-service</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>           <span class="na">android:description=</span><span class="s">&quot;@string/servicedesc&quot;</span>
</span><span class='line'>           <span class="na">android:requireDeviceUnlock=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;aid-group</span> <span class="na">android:description=</span><span class="s">&quot;@string/aiddescription&quot;</span>
</span><span class='line'>               <span class="na">android:category=</span><span class="s">&quot;other&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;aid-filter</span> <span class="na">android:name=</span><span class="s">&quot;F0010203040506&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;aid-filter</span> <span class="na">android:name=</span><span class="s">&quot;F0394148148100&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/aid-group&gt;</span>
</span><span class='line'><span class="nt">&lt;/host-apdu-service&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>相关资料</h4>

<p>1.NDEF数据解析实例：<a href="http://note.youdao.com/share/?id=8b45d342e34d2bce0fade2218bafd79c&amp;type=note">http</a><a href="http://note.youdao.com/share/?id=8b45d342e34d2bce0fade2218bafd79c&amp;type=note">://note.youdao.com/share/?id=8b45d342e34d2bce0fade2218bafd79c&amp;type=note#</a><a href="http://note.youdao.com/share/?id=8b45d342e34d2bce0fade2218bafd79c&amp;type=note">/</a></p>

<p>2.AndnroidNFC官网介绍：<a href="https://developer.android.com/guide/topics/connectivity/nfc/index.html">https</a><a href="https://developer.android.com/guide/topics/connectivity/nfc/index.html">://</a><a href="https://developer.android.com/guide/topics/connectivity/nfc/index.html">developer.android.com/guide/topics/connectivity/nfc/index.html</a></p>

<p>3.NFC相关的应用：NXPTagWriter、NXPTagInfo、MIFARE经典工具</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android的消息机制-Handler]]></title>
    <link href="http://www.monkeyliu.com/blog/2016/08/08/handler/"/>
    <updated>2016-08-08T22:51:48+08:00</updated>
    <id>http://www.monkeyliu.com/blog/2016/08/08/handler</id>
    <content type="html"><![CDATA[<p>本文总结一下Android消息机制Handler的一些内部实现原理。Handler在我们Android开发中经常用来切换UI线程和Worker线程，详细了解其内部的实现原理之后，会更加明白其实现的机制，更加灵活地使用。</p>

<!-- more -->


<h3>为什么需要切换UI/Worker线程?</h3>

<p>Android规定所有的UI操作必须在主线程中完成，又建议不要在主线程中进行耗时的操作，否则就会产生ANR异常。所以，我们在进行一些耗时操作时，必须开一个子线程进行此类操作，如果需要在子线程中访问UI资源，那么就需要切换到主线程进行UI操作。</p>

<p>ViewRootImpl中对UI的操作进行了验证：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">checkThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mThread</span> <span class="o">!=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">CalledFromWrongThreadException</span><span class="o">(</span>
</span><span class='line'>                    <span class="s">&quot;Only the original thread that created a view hierarchy can touch its views.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这类错误在新手接触Android开发肯定遇到过，就是在子线程操作UI导致的。</p>

<p>那么，Android为什么那么蛋疼地要求一定要在UI线程中进行UI操作呢？</p>

<p>这是因为Android的UI操作是非线程安全的，如果多个线程并发操作UI，可能会导致UI出于某种不可控的状态（可以理解为Google程序员解决不了多线程并发的问题 0-0，如果加上锁的机制来控制并发问题又会导致代码设计、效率问题），所以Android便采用了单线程模型,只能在主线程中操作UI.</p>

<h3>Handler消息机制模型</h3>

<p> <img src="http://www.monkeyliu.com/images/articles/handlermodule.png" alt="handlermodule" /></p>

<p>上图是Handler能够进行线程切换的模型图，在Thread#1中发出的Message添加到Thread#2中对应的消息队列中，然后Thread#2中的Looper不断循环取出Message，在Thread#2中调用相关逻辑，完成两个线程间的切换。</p>

<p>图中包含了我们需要关心的所有对象，Handler、Looper、MessageQueue。</p>

<p><strong>Handler</strong></p>

<p>暴露给我们用来切换线程的上层接口，提供了一系列send、post方法，用来发送Message。</p>

<p><strong>Looper</strong></p>

<p>线程切换的关键，内部维护一个消息队列，该对象以阻塞的方式不断从MessageQueue中读取消息，然后在当前线程（要切换的线程）执行消息所代表的逻辑。</p>

<p><strong>MessageQueue</strong></p>

<p>消息队列，用来存放Message。其实现是单链表数据结构，方便插入和删除。</p>

<h3>Handler消息机制源码分析</h3>

<p>以上介绍了Handler机制的几个重要组成部分，究竟它们是怎么组合在一起，完成Android中重要的消息机制的呢，我们通过源码来进行分析，这一部分代码非常清晰！</p>

<p>我们在开发中切换到UI线程的常规做法就是，在最外层实例化一个Handler子类对象，重写handleMessage方法，等待子线程发过来的message，然后对应message进行不同的UI操作。很显然，要看透这一套系统，把它们之间的关系理清，就要从Handler的构造方法开始看起啦，这是我们能看到的入口。</p>

<p>Handler构造方法很多，我们从无参构造方法进入，调用到另一个有参构造方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">Handler</span><span class="o">(</span><span class="n">Callback</span> <span class="n">callback</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">async</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="n">mLooper</span> <span class="o">=</span> <span class="n">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mLooper</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;Can&#39;t create handler inside thread that has not called Looper.prepare()&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">mQueue</span> <span class="o">=</span> <span class="n">mLooper</span><span class="o">.</span><span class="na">mQueue</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mCallback</span> <span class="o">=</span> <span class="n">callback</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mAsynchronous</span> <span class="o">=</span> <span class="n">async</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一眼望去就看到了我们的Looper（mLooper）大哥哥和MessageQueue（mQueue）大姐姐！</p>

<p>继续看Looper.myLooper()的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">Looper</span><span class="o">&gt;</span> <span class="n">sThreadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">Looper</span><span class="o">&gt;();</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Looper</span> <span class="nf">myLooper</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sThreadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>炒鸡简单，直接通过sThreadLocal.get()便得到了Looper对象。那么这里ThreadLocal又是什么东西，怎么从它里面就可以得到Looper对象呢。</p>

<p>其实<strong>ThreadLoal</strong>是一个很巧妙的类，通过它可以往指定的线程中存储数据，只有在指定的线程中可以获得存储的数据，类似于一个HashMap的结构（Key是某个线程），但是其内部的实现完全不是HashMap，可以抽象地理解为ThreadLocal是一个以线程为作用域的HashMap。可以深入ThreadLocal查看其具体实现，这里就不详细讨论了。</p>

<p>ThreadLocal在这里的使用场景是用来保存每个线程的Looper对象（泛型为Looper）的，通过ThreadLocal#set(Looper)保存当前线程的Looper对象，然后需要的时候通过ThreadLocal#get()取出来用。</p>

<p>在Handler构造方法中可以看到，如果mLooper==null，则会抛出异常提示“Can&rsquo;t create handler inside thread that has not called Looper.prepare()”. 那么这样看来我们创建Looper对象实例，然后set进ThreadLocal就是在所谓的Looper.prepare()中进行的了~。</p>

<p>验证：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">prepare</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">quitAllowed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sThreadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Only one Looper may be created per thread&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">sThreadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="nf">Looper</span><span class="o">(</span><span class="n">quitAllowed</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>嗯，如此的完美，并且还有友好的提示，如果ThreadLocal中已经设置过Looper则抛出异常"Only one Looper may be created per thread"，所以我们可以得出一个结论：<strong>一个线程只拥有一个Looper对象</strong></p>

<p>问题来了，我们在主线程中创建Handler的时候并没有看到有调用过Looper.prepare方法呀，它是什么时候调用来初始化Looper的，于是我们就要进入framework的ActivityThread类中寻找答案了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Looper</span><span class="o">.</span><span class="na">prepareMainLooper</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ActivityThread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ActivityThread</span><span class="o">();</span>
</span><span class='line'>        <span class="n">thread</span><span class="o">.</span><span class="na">attach</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sMainThreadHandler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sMainThreadHandler</span> <span class="o">=</span> <span class="n">thread</span><span class="o">.</span><span class="na">getHandler</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AsyncTask</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">().</span><span class="na">setMessageLogging</span><span class="o">(</span><span class="k">new</span>
</span><span class='line'>                    <span class="nf">LogPrinter</span><span class="o">(</span><span class="n">Log</span><span class="o">.</span><span class="na">DEBUG</span><span class="o">,</span> <span class="s">&quot;ActivityThread&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Main thread loop unexpectedly exited&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>真相只有一个，我们在主线程的main入口方法中可以看到<em>Looper.prepareMainLooper</em>方法，这个方法跟prepare类似，只是加了一点特殊的地方：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Initialize the current thread as a looper, marking it as an</span>
</span><span class='line'><span class="cm">     * application&#39;s main looper. The main looper for your application</span>
</span><span class='line'><span class="cm">     * is created by the Android environment, so you should never need</span>
</span><span class='line'><span class="cm">     * to call this function yourself.  See also: {@link #prepare()}</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">prepareMainLooper</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">prepare</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">sMainLooper</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;The main Looper has already been prepared.&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">sMainLooper</span> <span class="o">=</span> <span class="n">myLooper</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Returns the application&#39;s main looper, which lives in the main thread of the application.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Looper</span> <span class="nf">getMainLooper</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">sMainLooper</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以直接通过getMainLooper来获得主线程拥有的那个Looper了，Handler有个构造方法可以接受一个Looper，我们可以把MainLooper传进去，就可以将消息send到MainLooper维护的MessageQueue中，来完成到主线程的切换了。</p>

<p>在main方法的最后我们可以看到调用了Looper.loop()方法，这里开始循环读取msg，在当前线程执行逻辑了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Run the message queue in this thread. Be sure to call</span>
</span><span class='line'><span class="cm">     * {@link #quit()} to end the loop.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">loop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Looper</span> <span class="n">me</span> <span class="o">=</span> <span class="n">myLooper</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">me</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;No Looper; Looper.prepare() wasn&#39;t called on this thread.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">MessageQueue</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">me</span><span class="o">.</span><span class="na">mQueue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Make sure the identity of this thread is that of the local process,</span>
</span><span class='line'>        <span class="c1">// and keep track of what that identity token actually is.</span>
</span><span class='line'>        <span class="n">Binder</span><span class="o">.</span><span class="na">clearCallingIdentity</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">long</span> <span class="n">ident</span> <span class="o">=</span> <span class="n">Binder</span><span class="o">.</span><span class="na">clearCallingIdentity</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Message</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">next</span><span class="o">();</span> <span class="c1">// might block</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">msg</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// No message indicates that the message queue is quitting.</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// This must be in a local variable, in case a UI event sets the logger</span>
</span><span class='line'>            <span class="n">Printer</span> <span class="n">logging</span> <span class="o">=</span> <span class="n">me</span><span class="o">.</span><span class="na">mLogging</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">logging</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logging</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&gt;&gt;&gt;&gt;&gt; Dispatching to &quot;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">.</span><span class="na">target</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span>
</span><span class='line'>                        <span class="n">msg</span><span class="o">.</span><span class="na">callback</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">.</span><span class="na">what</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">msg</span><span class="o">.</span><span class="na">target</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">logging</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logging</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">.</span><span class="na">target</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">.</span><span class="na">callback</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Make sure that during the course of dispatching the</span>
</span><span class='line'>            <span class="c1">// identity of the thread wasn&#39;t corrupted.</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">long</span> <span class="n">newIdent</span> <span class="o">=</span> <span class="n">Binder</span><span class="o">.</span><span class="na">clearCallingIdentity</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">ident</span> <span class="o">!=</span> <span class="n">newIdent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">wtf</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Thread identity changed from 0x&quot;</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">Long</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">ident</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; to 0x&quot;</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">Long</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">newIdent</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; while dispatching to &quot;</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">msg</span><span class="o">.</span><span class="na">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">msg</span><span class="o">.</span><span class="na">callback</span> <span class="o">+</span> <span class="s">&quot; what=&quot;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">.</span><span class="na">what</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">msg</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>读取消息这一块没什么说的，内部有一个死循环一直在阻塞读取消息队列中的数据，然后通过<strong>msg.target.dispatchMessage(msg);</strong> 调用到目标handler中去。于是，不管msg来自哪个线程，最终的逻辑处理都会切换到Looper.loop()执行所在的线程中。diapatchMessage分发消息源码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Handle system messages here.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dispatchMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">callback</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">handleCallback</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mCallback</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">mCallback</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">handleMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从中也可以得到一些有用的信息，其实我们平常写的handleMessage()是在第三种情况才会调用到的。第一种情况是Handler#post(Runnable)，msg.callback就是runnable对象。第二种情况是在构造方法中可以传一个Callback对象，用在有些情况下，不想继承Handler实现一个子类重写handleMessage，可以直接传此参数完成回调。</p>

<h3>完结</h3>

<p>整个Handle消息机制就是这样，逻辑上非常清晰，以后写Handler的时候，脑子就更加清晰，它们的整个流程关系是怎样了，说不定还可以解决一些模糊的问题，知其然所以然了~</p>

<p>大家也许会明白在子线程使用Handler要做的几个步骤的所以然了(还记得刚入门Android时死记的&hellip;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">Thread</span><span class="o">(){</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>          <span class="n">Looper</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
</span><span class='line'>          <span class="n">Handler</span> <span class="n">myHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Handler</span><span class="o">();</span>
</span><span class='line'>          <span class="n">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p>《Android开发艺术探索》一书</p>

<p>  Android源码</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android触摸事件分发机制]]></title>
    <link href="http://www.monkeyliu.com/blog/2016/06/17/touchevent/"/>
    <updated>2016-06-17T11:31:09+08:00</updated>
    <id>http://www.monkeyliu.com/blog/2016/06/17/touchevent</id>
    <content type="html"><![CDATA[<p>结合源码剖析一下Android的触摸事件分发机制，加深理解和记忆，将一些模棱两可的点搞清晰。</p>

<h3>基础方法</h3>

<p>在Android的事件分发过程中涉及到View的三个重要方法:</p>

<!-- more -->


<p><strong>public boolean dispatchTouchEvent(MotionEvent ev)</strong></p>

<p>进行事件的分发。如果是ViewGroup会在其中将事件分发给其子View进行事件处理 或者 在自己的onTouchEvent中处理（当拦截或者子View都不消费事件时），如果是View，则在其中调用onTouchEvent进行事件的处理,不会分发。</p>

<p>返回值表示是否消费了事件。受当前View和其子View的影响。</p>

<p><strong>public boolean onInterceptTouchEvent(MotionEvent ev)</strong></p>

<p>进行事件的拦截。 返回true表示拦截，如果拦截了某个事件，则对于整个事件序列的其他序列，都不再调用此方法进行拦截。</p>

<p>返回值表示是否拦截事件。</p>

<p><strong>public boolean onTouchEvent(MotionEvent ev)</strong></p>

<p>进行事件的处理，返回值表示是否消费事件，如果不消费，则事件序列中的其他事件不会再传递给它。</p>

<hr />

<p>整个事件分发的过程可以用以下代码来表示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">){</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">consume</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">onInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">)){</span>
</span><span class='line'>      <span class="n">consume</span> <span class="o">=</span> <span class="n">onTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>      <span class="n">consume</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">consume</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述的过程是整个事件分发流程的一环，依赖子View、返回结果也影响父View。这里也只是一个简单的过程，在实际的过程中还有很多需要注意的点，后面会再细化其中的某些细节。</p>

<h3>结合源码进行分析</h3>

<p>1、事件分发的入口从Activity#dispatchTouchEvent开始：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">()</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">onUserInteraction</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">getWindow</span><span class="o">().</span><span class="na">superDispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法总调用了<strong>getWindow().superDispatchTouchEvent(ev)</strong> .如果返回true(消费了事件)则直接return true执行完毕.
否则调用自己的<strong>onTouchEvent</strong>进行处理（如果事件没有消费，最终交给Activity处理)。</p>

<p>2、getWindow()的实现为PhoneWindow类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">superDispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mDecor</span><span class="o">.</span><span class="na">superDispatchTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此处调用mDecor中的方法。</p>

<p>mDecor是Window中的根View，本身是一个FrameLayout，根据应用的Theme会有不同的布局，我们在<strong>Activity#onCreate</strong>中setContentView设置的布局，其实就是放在它的一个子View中(id为android.R.id.content)。</p>

<p><img src="http://www.monkeyliu.com/images/articles/layout.png" alt="" /></p>

<p>3、继续跟下去，到达ViewGroup中:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kt">boolean</span> <span class="n">handled</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">onFilterTouchEventForSecurity</span><span class="o">(</span><span class="n">ev</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>           <span class="kd">final</span> <span class="kt">int</span> <span class="n">action</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
</span><span class='line'>           <span class="kd">final</span> <span class="kt">int</span> <span class="n">actionMasked</span> <span class="o">=</span> <span class="n">action</span> <span class="o">&amp;</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MASK</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// Handle an initial down.</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="c1">// Throw away all previous state when starting a new touch gesture.</span>
</span><span class='line'>               <span class="c1">// The framework may have dropped the up or cancel event for the previous gesture</span>
</span><span class='line'>               <span class="c1">// due to an app switch, ANR, or some other state change.</span>
</span><span class='line'>               <span class="n">cancelAndClearTouchTargets</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>               <span class="n">resetTouchState</span><span class="o">();</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// Check for interception.</span>
</span><span class='line'>           <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">intercepted</span><span class="o">;</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span>
</span><span class='line'>                   <span class="o">||</span> <span class="n">mFirstTouchTarget</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">disallowIntercept</span> <span class="o">=</span> <span class="o">(</span><span class="n">mGroupFlags</span> <span class="o">&amp;</span> <span class="n">FLAG_DISALLOW_INTERCEPT</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>               <span class="k">if</span> <span class="o">(!</span><span class="n">disallowIntercept</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                   <span class="n">intercepted</span> <span class="o">=</span> <span class="n">onInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>                   <span class="n">ev</span><span class="o">.</span><span class="na">setAction</span><span class="o">(</span><span class="n">action</span><span class="o">);</span> <span class="c1">// restore action in case it was changed</span>
</span><span class='line'>               <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                   <span class="n">intercepted</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>               <span class="c1">// There are no touch targets and this action is not an initial down</span>
</span><span class='line'>               <span class="c1">// so this view group continues to intercept touches.</span>
</span><span class='line'>               <span class="n">intercepted</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// Check for cancelation.</span>
</span><span class='line'>           <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">canceled</span> <span class="o">=</span> <span class="n">resetCancelNextUpFlag</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>                   <span class="o">||</span> <span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// Update list of touch targets for pointer down, if needed.</span>
</span><span class='line'>           <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">split</span> <span class="o">=</span> <span class="o">(</span><span class="n">mGroupFlags</span> <span class="o">&amp;</span> <span class="n">FLAG_SPLIT_MOTION_EVENTS</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>           <span class="n">TouchTarget</span> <span class="n">newTouchTarget</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>           <span class="kt">boolean</span> <span class="n">alreadyDispatchedToNewTouchTarget</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(!</span><span class="n">canceled</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">intercepted</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="k">if</span> <span class="o">(</span><span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span>
</span><span class='line'>                       <span class="o">||</span> <span class="o">(</span><span class="n">split</span> <span class="o">&amp;&amp;</span> <span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_POINTER_DOWN</span><span class="o">)</span>
</span><span class='line'>                       <span class="o">||</span> <span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_HOVER_MOVE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                   <span class="kd">final</span> <span class="kt">int</span> <span class="n">childrenCount</span> <span class="o">=</span> <span class="n">mChildrenCount</span><span class="o">;</span>
</span><span class='line'>                   <span class="k">if</span> <span class="o">(</span><span class="n">newTouchTarget</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">childrenCount</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                       <span class="kd">final</span> <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getX</span><span class="o">(</span><span class="n">actionIndex</span><span class="o">);</span>
</span><span class='line'>                       <span class="kd">final</span> <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getY</span><span class="o">(</span><span class="n">actionIndex</span><span class="o">);</span>
</span><span class='line'>                       <span class="c1">// Find a child that can receive the event.</span>
</span><span class='line'>                       <span class="c1">// Scan children from front to back.</span>
</span><span class='line'>                       <span class="kd">final</span> <span class="n">View</span><span class="o">[]</span> <span class="n">children</span> <span class="o">=</span> <span class="n">mChildren</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                       <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">customOrder</span> <span class="o">=</span> <span class="n">isChildrenDrawingOrderEnabled</span><span class="o">();</span>
</span><span class='line'>                       <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">childrenCount</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>                           <span class="kd">final</span> <span class="kt">int</span> <span class="n">childIndex</span> <span class="o">=</span> <span class="n">customOrder</span> <span class="o">?</span>
</span><span class='line'>                                   <span class="n">getChildDrawingOrder</span><span class="o">(</span><span class="n">childrenCount</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>                           <span class="kd">final</span> <span class="n">View</span> <span class="n">child</span> <span class="o">=</span> <span class="n">children</span><span class="o">[</span><span class="n">childIndex</span><span class="o">];</span>
</span><span class='line'>                           <span class="k">if</span> <span class="o">(!</span><span class="n">canViewReceivePointerEvents</span><span class="o">(</span><span class="n">child</span><span class="o">)</span>
</span><span class='line'>                                   <span class="o">||</span> <span class="o">!</span><span class="n">isTransformedTouchPointInView</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">child</span><span class="o">,</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                               <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                           <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                           <span class="n">newTouchTarget</span> <span class="o">=</span> <span class="n">getTouchTarget</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
</span><span class='line'>                           <span class="k">if</span> <span class="o">(</span><span class="n">newTouchTarget</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                               <span class="c1">// Child is already receiving touch within its bounds.</span>
</span><span class='line'>                               <span class="c1">// Give it the new pointer in addition to the ones it is handling.</span>
</span><span class='line'>                               <span class="n">newTouchTarget</span><span class="o">.</span><span class="na">pointerIdBits</span> <span class="o">|=</span> <span class="n">idBitsToAssign</span><span class="o">;</span>
</span><span class='line'>                               <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                           <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                           <span class="n">resetCancelNextUpFlag</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
</span><span class='line'>                           <span class="k">if</span> <span class="o">(</span><span class="n">dispatchTransformedTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">child</span><span class="o">,</span> <span class="n">idBitsToAssign</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                               <span class="c1">// Child wants to receive touch within its bounds.</span>
</span><span class='line'>                               <span class="n">mLastTouchDownTime</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getDownTime</span><span class="o">();</span>
</span><span class='line'>                               <span class="n">mLastTouchDownIndex</span> <span class="o">=</span> <span class="n">childIndex</span><span class="o">;</span>
</span><span class='line'>                               <span class="n">mLastTouchDownX</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
</span><span class='line'>                               <span class="n">mLastTouchDownY</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>
</span><span class='line'>                               <span class="n">newTouchTarget</span> <span class="o">=</span> <span class="n">addTouchTarget</span><span class="o">(</span><span class="n">child</span><span class="o">,</span> <span class="n">idBitsToAssign</span><span class="o">);</span>
</span><span class='line'>                               <span class="n">alreadyDispatchedToNewTouchTarget</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                               <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                           <span class="o">}</span>
</span><span class='line'>                       <span class="o">}</span>
</span><span class='line'>                   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                   <span class="k">if</span> <span class="o">(</span><span class="n">newTouchTarget</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">mFirstTouchTarget</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                       <span class="c1">// Did not find a child to receive the event.</span>
</span><span class='line'>                       <span class="c1">// Assign the pointer to the least recently added target.</span>
</span><span class='line'>                       <span class="n">newTouchTarget</span> <span class="o">=</span> <span class="n">mFirstTouchTarget</span><span class="o">;</span>
</span><span class='line'>                       <span class="k">while</span> <span class="o">(</span><span class="n">newTouchTarget</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                           <span class="n">newTouchTarget</span> <span class="o">=</span> <span class="n">newTouchTarget</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>                       <span class="o">}</span>
</span><span class='line'>                       <span class="n">newTouchTarget</span><span class="o">.</span><span class="na">pointerIdBits</span> <span class="o">|=</span> <span class="n">idBitsToAssign</span><span class="o">;</span>
</span><span class='line'>                   <span class="o">}</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// Dispatch to touch targets.</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">mFirstTouchTarget</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="c1">// No touch targets so treat this as an ordinary view.</span>
</span><span class='line'>               <span class="n">handled</span> <span class="o">=</span> <span class="n">dispatchTransformedTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">,</span> <span class="n">canceled</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">TouchTarget</span><span class="o">.</span><span class="na">ALL_POINTER_IDS</span><span class="o">);</span>
</span><span class='line'>           <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>               <span class="c1">// Dispatch to touch targets, excluding the new touch target if we already</span>
</span><span class='line'>               <span class="c1">// dispatched to it.  Cancel touch targets if necessary.</span>
</span><span class='line'>               <span class="n">TouchTarget</span> <span class="n">predecessor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>               <span class="n">TouchTarget</span> <span class="n">target</span> <span class="o">=</span> <span class="n">mFirstTouchTarget</span><span class="o">;</span>
</span><span class='line'>               <span class="k">while</span> <span class="o">(</span><span class="n">target</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                   <span class="kd">final</span> <span class="n">TouchTarget</span> <span class="n">next</span> <span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>                   <span class="k">if</span> <span class="o">(</span><span class="n">alreadyDispatchedToNewTouchTarget</span> <span class="o">&amp;&amp;</span> <span class="n">target</span> <span class="o">==</span> <span class="n">newTouchTarget</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                       <span class="n">handled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                       <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">cancelChild</span> <span class="o">=</span> <span class="n">resetCancelNextUpFlag</span><span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="na">child</span><span class="o">)</span>
</span><span class='line'>                               <span class="o">||</span> <span class="n">intercepted</span><span class="o">;</span>
</span><span class='line'>                       <span class="k">if</span> <span class="o">(</span><span class="n">dispatchTransformedTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">,</span> <span class="n">cancelChild</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">target</span><span class="o">.</span><span class="na">child</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="na">pointerIdBits</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                           <span class="n">handled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                       <span class="o">}</span>
</span><span class='line'>                       <span class="k">if</span> <span class="o">(</span><span class="n">cancelChild</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                           <span class="k">if</span> <span class="o">(</span><span class="n">predecessor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                               <span class="n">mFirstTouchTarget</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                           <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                               <span class="n">predecessor</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                           <span class="o">}</span>
</span><span class='line'>                           <span class="n">target</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>                           <span class="n">target</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                           <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                       <span class="o">}</span>
</span><span class='line'>                   <span class="o">}</span>
</span><span class='line'>                   <span class="n">predecessor</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>                   <span class="n">target</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// Update list of touch targets for pointer up or cancel, if needed.</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">canceled</span>
</span><span class='line'>                   <span class="o">||</span> <span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span>
</span><span class='line'>                   <span class="o">||</span> <span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_HOVER_MOVE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">resetTouchState</span><span class="o">();</span>
</span><span class='line'>           <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">split</span> <span class="o">&amp;&amp;</span> <span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_POINTER_UP</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="kd">final</span> <span class="kt">int</span> <span class="n">actionIndex</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">();</span>
</span><span class='line'>               <span class="kd">final</span> <span class="kt">int</span> <span class="n">idBitsToRemove</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">ev</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">actionIndex</span><span class="o">);</span>
</span><span class='line'>               <span class="n">removePointersFromTouchTargets</span><span class="o">(</span><span class="n">idBitsToRemove</span><span class="o">);</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">if</span> <span class="o">(!</span><span class="n">handled</span> <span class="o">&amp;&amp;</span> <span class="n">mInputEventConsistencyVerifier</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">mInputEventConsistencyVerifier</span><span class="o">.</span><span class="na">onUnhandledEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">handled</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ViewGroup中dispatch方法内容比较多，这里删除了一部分无关的，所有的点基本都可以从这个方法中找到。</p>

<p>在ViewGroup#dispatchTouchEvent中第18行有如下判断,简化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span> <span class="o">||</span> <span class="n">mFirstTouchTarget</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">intercept</span> <span class="o">=</span> <span class="n">onInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>    <span class="n">intercept</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出在DOWN的时候，会进入if方法体，调用三大方法之一 <strong>onInterceptTouchEvent</strong>， 此方法默认返回false,也就是不拦截事件，intercept = false;</p>

<p>mFirstTouchTarget 非常重要，之后的所有判断几乎都跟这个变量有联系。顾名思义，这个变量代表的是ViewGroup的事件分发目标，是ViewGroup的一个Child。</p>

<p>有三种情况会导致mFirstTouchTarget=null（也就是没有事件分发的目标了）:</p>

<ul>
<li>onInterceptTouchEvent返回了true拦截了DOWN事件；</li>
<li>此ViewGroup没有子View；</li>
<li>所有的子View都不消费事件。</li>
</ul>


<p>二和三的处理在41~84行，主要是遍历了能接收到点击事件的子View然后将事件分发过去，在子View分发事件返回了true消费了事件，才将mFirstTouchTarget指向它，其他情况则为null。三种情况下都会导致mFirstTouchTarget不能够被赋值。</p>

<p>如果满足上述三种情况导致mFirstTouchTarget=null，则对于事件序列中DOWN之后的事件，都会进入else体，intercept=true,拦截事件自己处理。在98~102行自己进行处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">dispatchTransformedTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">cancel</span><span class="o">,</span>
</span><span class='line'>           <span class="n">View</span> <span class="n">child</span><span class="o">,</span> <span class="kt">int</span> <span class="n">desiredPointerIdBits</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">handled</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Canceling motions is a special case.  We don&#39;t need to perform any transformations</span>
</span><span class='line'>       <span class="c1">// or filtering.  The important part is the action, not the contents.</span>
</span><span class='line'>       <span class="kd">final</span> <span class="kt">int</span> <span class="n">oldAction</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">cancel</span> <span class="o">||</span> <span class="n">oldAction</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">event</span><span class="o">.</span><span class="na">setAction</span><span class="o">(</span><span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">);</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">child</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">handled</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>           <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">handled</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="n">event</span><span class="o">.</span><span class="na">setAction</span><span class="o">(</span><span class="n">oldAction</span><span class="o">);</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">handled</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出如果child==null，则会调用父类的dispatchTouchEvent()方法进行处理，ViewGroup的父类也就是View,从此，分发事件的逻辑进入View中，后面再讲。</p>

<h4>总结</h4>

<ul>
<li>如果一个View决定拦截，那么后续整个事件序列只能由它来处理（mFirstTarget==null之后，每次都进入else体），并且它的onInterceptTouchEvent方法不会再调用。</li>
<li>如果一个View不消耗传递给它的ACTION_DOWN事件，则之后的所有事件都不会再交给它处理，事件会将重新交给父元素去处理（同样是因为父容器的mFirstTarget==null，DOWN之后的事件不会继续往这个View分发）。</li>
</ul>


<p>考虑一下两个特殊情况：</p>

<ol>
<li>如果在ViewGroup的onInterceptTouchEvent中对MOVE事件return true进行拦截，会有什么情况?</li>
</ol>


<p>按道理来讲，如果ViewGroup中对MOVE事件进行了拦截，那么事件就不应该分发给View了，做一下实验:</p>

<p>这里写了两个自定义的View：</p>

<p>ViewGroup在第一个move事件时，拦截。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyViewGroup</span> <span class="kd">extends</span> <span class="n">LinearLayout</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MyViewGroup</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MyViewGroup</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MyViewGroup</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">()</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">){</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;seewo&quot;</span><span class="o">,</span><span class="s">&quot;ViewGroup#onTouchEvent:&quot;</span><span class="o">+</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyView</span> <span class="kd">extends</span> <span class="n">Button</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MyView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MyView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MyView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;monkey&quot;</span><span class="o">,</span><span class="s">&quot;onTouchEvent:&quot;</span><span class="o">+</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;monkey&quot;</span><span class="o">,</span><span class="s">&quot;Activity#onTouchEvent:&quot;</span><span class="o">+</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>布局：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;com.monkeyliu.test1.MyViewGroup</span>
</span><span class='line'>    <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;com.monkeyliu.test1.MyView</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;button&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/com.monkeyliu.test1.MyViewGroup&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果在MyView上点击一下，Log打印：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">10</span><span class="o">:</span><span class="mi">58</span><span class="o">:</span><span class="mf">53.954</span> <span class="mi">23314</span><span class="o">-</span><span class="mi">23314</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">0</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">10</span><span class="o">:</span><span class="mi">58</span><span class="o">:</span><span class="mf">54.065</span> <span class="mi">23314</span><span class="o">-</span><span class="mi">23314</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>View处理了一个DOWN和一个UP。</p>

<p>如果在MyView上DOWN-MOVE-MOVE-&hellip;-MOVE-UP，Log打印：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">06</span><span class="o">:</span><span class="mf">06.081</span> <span class="mi">23314</span><span class="o">-</span><span class="mi">23314</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">0</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">06</span><span class="o">:</span><span class="mf">06.185</span> <span class="mi">23314</span><span class="o">-</span><span class="mi">23314</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">3</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">06</span><span class="o">:</span><span class="mf">06.200</span> <span class="mi">23314</span><span class="o">-</span><span class="mi">23314</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">ViewGroup</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">06</span><span class="o">:</span><span class="mf">06.200</span> <span class="mi">23314</span><span class="o">-</span><span class="mi">23314</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">Activity</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">06</span><span class="o">:</span><span class="mf">06.291</span> <span class="mi">23314</span><span class="o">-</span><span class="mi">23314</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">ViewGroup</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">06</span><span class="o">:</span><span class="mf">06.291</span> <span class="mi">23314</span><span class="o">-</span><span class="mi">23314</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">Activity</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">06</span><span class="o">:</span><span class="mf">06.316</span> <span class="mi">23314</span><span class="o">-</span><span class="mi">23314</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">ViewGroup</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">06</span><span class="o">:</span><span class="mf">06.316</span> <span class="mi">23314</span><span class="o">-</span><span class="mi">23314</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">Activity</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>View处理了一个DOWN和一个CANCEL，之后的MOVE事件向外传递给父容器处理，父容器不消费事件继续向上传给Activity处理。所以，在拦截MOVE事件之后，向View分发了一个CANCEL事件，之后事件便不再分发给View.
这个处理的过程在98~134行,如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">mFirstTouchTarget</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// No touch targets so treat this as an ordinary view.</span>
</span><span class='line'>      <span class="n">handled</span> <span class="o">=</span> <span class="n">dispatchTransformedTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">,</span> <span class="n">canceled</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>              <span class="n">TouchTarget</span><span class="o">.</span><span class="na">ALL_POINTER_IDS</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Dispatch to touch targets, excluding the new touch target if we already</span>
</span><span class='line'>      <span class="c1">// dispatched to it.  Cancel touch targets if necessary.</span>
</span><span class='line'>      <span class="n">TouchTarget</span> <span class="n">predecessor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">TouchTarget</span> <span class="n">target</span> <span class="o">=</span> <span class="n">mFirstTouchTarget</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">target</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">final</span> <span class="n">TouchTarget</span> <span class="n">next</span> <span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">alreadyDispatchedToNewTouchTarget</span> <span class="o">&amp;&amp;</span> <span class="n">target</span> <span class="o">==</span> <span class="n">newTouchTarget</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">handled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">cancelChild</span> <span class="o">=</span> <span class="n">resetCancelNextUpFlag</span><span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="na">child</span><span class="o">)</span>
</span><span class='line'>                      <span class="o">||</span> <span class="n">intercepted</span><span class="o">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">dispatchTransformedTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">,</span> <span class="n">cancelChild</span><span class="o">,</span>
</span><span class='line'>                      <span class="n">target</span><span class="o">.</span><span class="na">child</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="na">pointerIdBits</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">handled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">cancelChild</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">if</span> <span class="o">(</span><span class="n">predecessor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">mFirstTouchTarget</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">predecessor</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="n">target</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>                  <span class="n">target</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                  <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">predecessor</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>          <span class="n">target</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>if体前面讲过，就是没有找到分发的子View，自己进行处理。</p>

<p>else体中15~20行，因为我们之前拦截了MOVE事件，所以15行的cancelChild变量为true，进而在17行dispatchTransformedTouchEvent方法中，产生CANCEL事件发给目标View，之后23行，会将mFirstTouchTarget置为null。之后接受到的事件便由自己处理，View再接收不到事件序列之后的任何事件，事件给父View处理。</p>

<ol>
<li>如果在View的onTouchEvent中对于MOVE事件，return false不进行消费会有什么结果?</li>
</ol>


<p>修改MyView.java</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;monkey&quot;</span><span class="o">,</span><span class="s">&quot;onTouchEvent:&quot;</span><span class="o">+</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">());</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">()</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改MyViewGroup.java，不拦截事件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在MyView上DOWN-MOVE-MOVE-&hellip;-MOVE-UP，Log为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.265</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">0</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.399</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.399</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">Activity</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.418</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.418</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">Activity</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.449</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.449</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">Activity</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.467</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.468</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">Activity</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.699</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.699</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">Activity</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.715</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.716</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">Activity</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.882</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">09.883</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">Activity</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">10.083</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">10.083</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="n">Activity</span><span class="err">#</span><span class="nl">onTouchEvent:</span><span class="mi">2</span>
</span><span class='line'><span class="mi">06</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="o">:</span><span class="mi">28</span><span class="o">:</span><span class="mf">10.400</span> <span class="mi">13787</span><span class="o">-</span><span class="mi">13787</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">monkeyliu</span><span class="o">.</span><span class="na">test1</span> <span class="n">V</span><span class="o">/</span><span class="nl">monkey:</span> <span class="nl">onTouchEvent:</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>很奇妙，View仍然接收到了每个事件，但是对于没有处理的MOVE事件，最后都交给了Activity处理，没有经过ViewGroup。</p>

<p>确实，从ViewGroup#dispatchTouchEvent中，在没有消费MOVE事件的情况下，没有找到将mFirstTouchTarget置为null，然后自己处理MOVE事件的代码。所以MOVE事件虽然没有消费，但是仍然会继续分发到目标View上。最终没有View消费事件，在Activity#onTouchEvent中进行了处理。</p>

<h4>总结</h4>

<ul>
<li><p>如果View不消耗除ACTION_DOWN之外的事件，仍然会收到事件序列的其他事件，父类的onTouchEvent不会调用，消失的事件会传给Activity处理（由此可见ACTION_DOWN事件才是主角，return true则一直接收事件，return false则不会再接收到后续事件）。</p>

<p>​</p></li>
</ul>


<p>4、View类中的事件处理逻辑</p>

<p>View中事件的处理比较清晰简单，它没有onInterceptTouchEvent方法，主要涉及到OnTouchListener和OnClickListener和onTouchEvent的执行顺序问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">onFilterTouchEventForSecurity</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//noinspection SimplifiableIfStatement</span>
</span><span class='line'>            <span class="n">ListenerInfo</span> <span class="n">li</span> <span class="o">=</span> <span class="n">mListenerInfo</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">li</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">li</span><span class="o">.</span><span class="na">mOnTouchListener</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>                    <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">mViewFlags</span> <span class="o">&amp;</span> <span class="n">ENABLED_MASK</span><span class="o">)</span> <span class="o">==</span> <span class="n">ENABLED</span>
</span><span class='line'>                    <span class="o">&amp;&amp;</span> <span class="n">li</span><span class="o">.</span><span class="na">mOnTouchListener</span><span class="o">.</span><span class="na">onTouch</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">result</span> <span class="o">&amp;&amp;</span> <span class="n">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述View#dispatchTouchEvent源码可以看出，会优先调用onTouchListener#onTouch方法，如果返回true，表示消耗了事件，不再进入onTouchEvent处理，否则会进入onTouchEvent逻辑中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kd">final</span> <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
</span><span class='line'>       <span class="kd">final</span> <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>
</span><span class='line'>       <span class="kd">final</span> <span class="kt">int</span> <span class="n">viewFlags</span> <span class="o">=</span> <span class="n">mViewFlags</span><span class="o">;</span>
</span><span class='line'>       <span class="kd">final</span> <span class="kt">int</span> <span class="n">action</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">//省略大量代码</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(((</span><span class="n">viewFlags</span> <span class="o">&amp;</span> <span class="n">CLICKABLE</span><span class="o">)</span> <span class="o">==</span> <span class="n">CLICKABLE</span> <span class="o">||</span>
</span><span class='line'>               <span class="o">(</span><span class="n">viewFlags</span> <span class="o">&amp;</span> <span class="n">LONG_CLICKABLE</span><span class="o">)</span> <span class="o">==</span> <span class="n">LONG_CLICKABLE</span><span class="o">)</span> <span class="o">||</span>
</span><span class='line'>               <span class="o">(</span><span class="n">viewFlags</span> <span class="o">&amp;</span> <span class="n">CONTEXT_CLICKABLE</span><span class="o">)</span> <span class="o">==</span> <span class="n">CONTEXT_CLICKABLE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">switch</span> <span class="o">(</span><span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>                   <span class="k">if</span> <span class="o">(</span><span class="n">mPerformClick</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                       <span class="n">mPerformClick</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PerformClick</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(!</span><span class="n">post</span><span class="o">(</span><span class="n">mPerformClick</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">performClick</span><span class="o">();</span>
</span><span class='line'>                     <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述为View#onTouchEvent源码，在ACTION_UP时，performClick调用了OnClickListener#onClick方法。</p>

<h4>所以</h4>

<ul>
<li>事件的处理顺序为:TouchListener#onTouch -> onTouchEvent -> onClick</li>
<li>事件的消费跟View的状态无关，即使View状态为DISABLED,只要满足CLICKABLE、LONG_CLICKABLE、CONTEXT_CLICKABLE中的一个就可以消费事件。</li>
</ul>


<h3>最后</h3>

<p>Andorid整个View树的事件分发，属于设计模式中的<code>组合模式</code>（组合模式具体内容自行搜索了解），对于一个控件，无论它是View还是ViewGroup都可以无差别地进行处理。我们针对View类进行事件分发即可。</p>

<p>对于整个事件分发流程，抛开让人头脑混乱的代码不看，我觉得可以总结为：</p>

<p>事件分发机制就是要找到一个View，让它处理一个事件序列。我们可以通过一系列手段来控制哪个View来处理这一个事件序列（通过拦截、不消费）。</p>

<h3>参考资料:</h3>

<p><a href="http://blog.csdn.net/lfdfhl/article/details/51603088">谷哥的小弟博文</a></p>

<p><a href="http://www.jianshu.com/p/8236278676fe">陈育的简书</a></p>

<p>《Android开发艺术探索》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程池的使用总结]]></title>
    <link href="http://www.monkeyliu.com/blog/2016/03/07/androidthreadpool/"/>
    <updated>2016-03-07T20:08:50+08:00</updated>
    <id>http://www.monkeyliu.com/blog/2016/03/07/androidthreadpool</id>
    <content type="html"><![CDATA[<p>本博文是对Java线程池使用的一篇总结，系统记录下线程池的用法：</p>

<h2>为什么使用线程池，线程池的好处是什么？</h2>

<ol>
<li><p>相比于每次都创建新的Thread，通过重用线程池中的线程，减少了创建线程和销毁线程带来的性能开销。</p></li>
<li><p>对线程进行管理控制，控制线程并发数量、定时执行、间隔执行等。</p></li>
</ol>


<!-- more -->


<h2>Java线程池模型的UML类图</h2>

<p><img src="http://www.monkeyliu.com/images/articles/threadpool.png" alt="" /></p>

<p>其中 <strong>ThreadPoolExecutor</strong> 是线程池的真正实现，从其构造方法中可以看出其创建的细节和需要配置的参数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">ThreadPoolExecutor</span><span class="o">(</span><span class="kt">int</span> <span class="n">corePoolSize</span><span class="o">,</span>
</span><span class='line'>                          <span class="kt">int</span> <span class="n">maximumPoolSize</span><span class="o">,</span>
</span><span class='line'>                          <span class="kt">long</span> <span class="n">keepAliveTime</span><span class="o">,</span>
</span><span class='line'>                          <span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">,</span>
</span><span class='line'>                          <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">workQueue</span><span class="o">,</span>
</span><span class='line'>                          <span class="n">ThreadFactory</span> <span class="n">threadFactory</span><span class="o">,</span>
</span><span class='line'>                          <span class="n">RejectedExecutionHandler</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{...}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面对每个参数进行解释：</p>

<ul>
<li><p><strong>corePoolSize</strong>: 线程池的核心线程数，默认情况下创建的核心线程不会被销毁，除非设置ThreadPoolExecutor#allowCoreThreadTimeOut为true,则根据keepAliveTime指定的超时时长进行销毁。</p></li>
<li><p><strong>maximumPoolSize</strong>: 线程池容纳的最大线程数（<em>除了核心线程，剩下的为非核心线程</em>），线程池中运行的线程不能超过此数量。</p></li>
<li><p><strong>keepAliveTime</strong>: 非核心线程闲置时的超时时长，超过此时间，非核心线程会被销毁，如果设置ThreadPoolExecutor#allowCoreThreadTimeOut为true，这核心线程也享有此特性。</p></li>
<li><p><strong>unit</strong>: 超时时长的时间单位。</p></li>
<li><p><strong>workQueue</strong>: 缓存的任务队列，当添加的任务数量大于corePoolSize时，任务将会被添加到此队列中进行缓存。</p></li>
<li><p><strong>threadFactory</strong>:线程池用来创建线程的工厂类，只有一个<strong>newThread(Runnable r)</strong> 的接口方法。</p></li>
<li><p><strong>RejectedExecutionHandler</strong>: 拒绝策略。当线程池中的线程达到最大线程数并且缓存任务队列已满，会调用此对象来进行处理。</p></li>
</ul>


<p>RejectedExecutionHandler是一个接口，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">RejectedExecutionHandler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">rejectedExecution</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">,</span> <span class="n">ThreadPoolExecutor</span> <span class="n">executor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有四个实现类，对应4种处理策略，从源码中可以看出他们的作用：</p>

<p><strong>AbortPolicy</strong> 丢弃当前添加的任务并且抛出RejectedExecutionException异常</p>

<p><strong>DiscardPolicy</strong> 丢弃当前添加的任务，但是不抛出异常</p>

<p><strong>DiscardOldestPolicy</strong> 丢弃最老的任务，也就是任务队列队首的任务，然后再尝试执行当前添加的任务</p>

<p><strong>CallerRunsPolicy</strong> 由调用线程处理该任务</p>

<h2>线程池的执行策略：</h2>

<ol>
<li><p>如果线程池中的线程数量&lt;核心线程数量，直接创建一个核心线程执行该任务。</p></li>
<li><p>如果线程池中的线程数量>=核心线程数量，则将任务插入到缓存任务队列中，如上 <strong>workQueue</strong> 参数指定的队列中。</p></li>
<li><p>如果缓存任务队列已满不能继续添加任务，并且线程池中的线程数量&lt;最大线程数，则创建一个非核心线程来执行该任务。</p></li>
<li><p>如果缓存任务队列和线程池均已满，则调用 <strong>RejectedExecutionHandler#rejectedExecution</strong> 进行处理。</p></li>
</ol>


<p><strong>另外：</strong></p>

<ul>
<li><p>如果线程池中的线程执行任务完毕从而闲置，则从缓存任务队列头取出一个任务，继续进行执行。（<strong>优点一，重用已经创建的线程</strong>）</p></li>
<li><p>如果线程池中线程闲置，并且缓存队列中已经没有任务，则线程池会根据超时规则进行线程的销毁。一般情况下，核心线程不进行销毁，非核心线程根据设置的超时间长进行销毁。</p></li>
<li><p>处理任务的优先级： 核心线程池 > 缓存任务队列 > 非核心线程池</p></li>
</ul>


<h2>常用的4种线程池模型：</h2>

<p><strong>Executors</strong> 提供了几个静态工厂方法来创建几种不同特性的线程池，本质上就是通过配置ThreadPoolExecutor构造方法的参数组合，实现具有不同特性的ThreadPool。</p>

<h4>1、FixedThreadPool - 固定线程数量的线程池</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ExecutorService</span> <span class="nf">newFixedThreadPool</span><span class="o">(</span><span class="kt">int</span> <span class="n">nThreads</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">ThreadPoolExecutor</span><span class="o">(</span><span class="n">nThreads</span><span class="o">,</span> <span class="n">nThreads</span><span class="o">,</span>
</span><span class='line'>                                  <span class="mi">0L</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">,</span>
</span><span class='line'>                                  <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从ThreadPoolExecutor的构造方法参数中可以看出，FixedThreadPool 中只有核心线程。当核心线程用完后，新添加的任务进入任务队列<strong>new LinkedBlockingQueue<Runnable>()</strong> 中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">LinkedBlockingQueue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认的构造方法创建了一个无限大的队列，所以我们可以添加任意数目的任务，但是最大并发数只是<em>nThreads</em>。</p>

<p>前面说过，默认情况下，核心线程是不会销毁的，即使它们执行完任务变为空闲状态，这样带来的好处是可以快速响应之后添加的新任务（免去了创建线程的性能开销）。</p>

<p>但是可能带来一些意想不到的问题，比如<strong>内存泄露</strong>。之前在进行Andorid项目的性能优化时就遇到过线程池带来的内存泄露，正是由于线程池中的核心线程持有了外部的对象（View、Activity等）,并且自身不会主动销毁，导致Activity等持有的其他大对象迟迟不能被GC回收，内存泄露。</p>

<p>当然，有解决方案：</p>

<p><strong>ThreadPoolExecutor#shutdown()</strong> 关闭线程池。</p>

<p> 调用此方法后，ExecutorService不会立即关闭，但是不再接受新的任务，直到所有线程都执行完毕才会关闭，所有在shutdown执行前提交的任务都会得到执行。</p>

<p><strong>ThreadPoolExecutor#shutdownNow()</strong> 立即关闭线程池。</p>

<p>调用此方法，会尝试关闭所有正在执行的任务（但是不能做任何的保证，它们可能都停止，也可能都完成），跳过正在等待的任务。</p>

<p>最后，使用弱引用的方式持有外部对象也是一个保险的做法。</p>

<h4>2、CachedThreadPool - 线程数量不定的线程池</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ExecutorService</span> <span class="nf">newCachedThreadPool</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="k">new</span> <span class="nf">ThreadPoolExecutor</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span>
</span><span class='line'>                                 <span class="mi">60L</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">,</span>
</span><span class='line'>                                 <span class="k">new</span> <span class="n">SynchronousQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样，从构造方法参数中可以看出，CachedThreadPool没有核心线程池，最大线程数量为无限大，也就是可以并发执行任意数目的线程（超时销毁时长为60s)。</p>

<p>其中 <strong>new SynchronousQueue<Runnable>()</strong> 是一个特殊的任务队列，可以理解为一个管道，只能通过任务，不能存储任何任务，这就导致所有插入的任务都会立即得到执行。</p>

<p>从此线程池的特性看来，这类线程池比较适合执行大量的耗时较少的任务。一方面，线程的并发数量是无限的。另一方面，60s的超时时长保证闲置的线程销毁，最终整个线程池不包含任何线程，不占用系统宝贵资源。</p>

<h4>3、SingleThreadExecutor - 只有一个核心线程的线程池</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ExecutorService</span> <span class="nf">newSingleThreadExecutor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">FinalizableDelegatedExecutorService</span>
</span><span class='line'>        <span class="o">(</span><span class="k">new</span> <span class="nf">ThreadPoolExecutor</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span>
</span><span class='line'>                                <span class="mi">0L</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">,</span>
</span><span class='line'>                                <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;()));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>跟FixedThreadPool类似，只是<strong>nThreads</strong>固定为1，算是它的一个特例。确保了所有任务都在同一个线程按顺序同步执行，这里不再多述。</p>

<h4>4、ScheduledThreadPool - 进行定时以及周期性任务执行的线程池</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ScheduledExecutorService</span> <span class="nf">newScheduledThreadPool</span><span class="o">(</span><span class="kt">int</span> <span class="n">corePoolSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">ScheduledThreadPoolExecutor</span><span class="o">(</span><span class="n">corePoolSize</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">ScheduledThreadPoolExecutor</span><span class="o">(</span><span class="kt">int</span> <span class="n">corePoolSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="n">corePoolSize</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span>
</span><span class='line'>          <span class="n">DEFAULT_KEEPALIVE_MILLIS</span><span class="o">,</span> <span class="n">MILLISECONDS</span><span class="o">,</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">DelayedWorkQueue</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从UML类图中，可以看出此类线程池的特殊之处-实现了<strong>ScheduledExecutorService</strong>接口，此接口中主要定义如下几个接口方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 延时delay后执行command</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ScheduledFuture</span><span class="o">&lt;?&gt;</span> <span class="n">schedule</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">command</span><span class="o">,</span> <span class="kt">long</span> <span class="n">delay</span><span class="o">,</span> <span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">ScheduledFuture</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">schedule</span><span class="o">(</span><span class="n">Callable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">callable</span><span class="o">,</span> <span class="kt">long</span> <span class="n">delay</span><span class="o">,</span> <span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 初始延时initialDelay后，每隔period执行一次command</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ScheduledFuture</span><span class="o">&lt;?&gt;</span> <span class="n">scheduleAtFixedRate</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">command</span><span class="o">,</span> <span class="kt">long</span> <span class="n">initialDelay</span><span class="o">,</span> <span class="kt">long</span> <span class="n">period</span><span class="o">,</span> <span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">ScheduledFuture</span><span class="o">&lt;?&gt;</span> <span class="n">scheduleWithFixedDelay</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">command</span><span class="o">,</span> <span class="kt">long</span> <span class="n">initialDelay</span><span class="o">,</span><span class="kt">long</span> <span class="n">delay</span><span class="o">,</span><span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用此类线程池可以定时执行任务和固定周期重复执行任务。</p>
]]></content>
  </entry>
  
</feed>
